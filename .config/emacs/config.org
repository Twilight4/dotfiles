#+TITLE: GNU Emacs Config
#+AUTHOR: Twilight4
#+DESCRIPTION: Personal Emacs config
#+STARTUP: show3levels
#+OPTIONS: TOC:4

* Table of Contents :toc:
- [[#elpaca-and-keybindings][Elpaca and Keybindings]]
  - [[#elpaca-package-manager][Elpaca package manager]]
  - [[#global-keybindings][Global keybindings]]
  - [[#general-keybindings][General keybindings]]
- [[#preferences][Preferences]]
  - [[#better-defaults][Better defaults]]
  - [[#littering][Littering]]
  - [[#scrolling][Scrolling]]
  - [[#fonts][Fonts]]
  - [[#misc][Misc]]
- [[#ui-configuration][UI Configuration]]
  - [[#all-the-icons][All-the-icons]]
  - [[#color-theme][Color theme]]
  - [[#mode-line][Mode line]]
  - [[#toggle-mode-line][Toggle mode line]]
  - [[#file-names-for-org-roam][File names for org-roam]]
  - [[#which-key][Which-key]]
  - [[#dashboard][Dashboard]]
  - [[#transparency][Transparency]]
  - [[#centaur-tabs][Centaur-tabs]]
  - [[#file-encoding][File encoding]]
  - [[#ansi-colours][Ansi colours]]
  - [[#youtube-link-export][YouTube link export]]
- [[#editing-features][Editing Features]]
  - [[#improved-file-management][Improved file management]]
  - [[#nicer-org-return][Nicer org-return]]
  - [[#expand-region][Expand-region]]
  - [[#symbol-overlay][Symbol-overlay]]
  - [[#hungry-delete][Hungry-delete]]
  - [[#multiple-cursors][Multiple-cursors]]
  - [[#buffer-switching-adjustment][Buffer-switching adjustment]]
  - [[#i-search][I-Search]]
  - [[#clipboard-adjustments][Clipboard adjustments]]
  - [[#selection-adjustments][Selection adjustments]]
  - [[#kill-whole-line-adjustment][Kill-whole-line adjustment]]
  - [[#copy-current-line][Copy current line]]
  - [[#copy-down-command][Copy down command]]
  - [[#toggle-selection-mode][Toggle selection mode]]
  - [[#screenshot-automation][Screenshot automation]]
  - [[#pdf-links-automation][Pdf-links automation]]
  - [[#no-littering][No-littering]]
  - [[#undo-tree][Undo-tree]]
  - [[#rainbow-mode][Rainbow-mode]]
  - [[#mark-whole-line][Mark whole line]]
  - [[#org-cycle-or-org-shifttab][Org-cycle or org-shifttab]]
  - [[#mark-till-endbeginning-of-paragraph][Mark till end/beginning of paragraph]]
  - [[#rainbow-delimeters][Rainbow-delimeters]]
  - [[#electric-pair-mode][Electric-pair-mode]]
  - [[#buffer-move][Buffer-move]]
  - [[#maximize-window-split][Maximize-window-split]]
- [[#completion-framework][Completion Framework]]
  - [[#vertico][Vertico]]
  - [[#orderless][Orderless]]
  - [[#marginalia][Marginalia]]
  - [[#consult][Consult]]
  - [[#embark][Embark]]
  - [[#embark-consult][Embark-consult]]
- [[#other-packages][Other Packages]]
  - [[#jinx][Jinx]]
  - [[#treemacs][Treemacs]]
  - [[#dired][Dired]]
  - [[#gptel][GPTel]]
  - [[#drag-stuff][Drag-stuff]]
  - [[#god-mode][God-Mode]]
  - [[#goto-chg][Goto-chg]]
- [[#org-mode][Org Mode]]
  - [[#essential-packages][Essential packages]]
  - [[#editing-features-for-org][Editing features for org]]
  - [[#org-configuration][Org configuration]]
  - [[#exporting][Exporting]]

* Elpaca and Keybindings
** Elpaca package manager

#+begin_src emacs-lisp
(defvar elpaca-installer-version 0.9)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil
                              :files (:defaults (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                 ((zerop (call-process "git" nil buffer t "clone"
                                       (plist-get order :repo) repo)))
                 ((zerop (call-process "git" nil buffer t "checkout"
                                       (or (plist-get order :ref) "--"))))
                 (emacs (concat invocation-directory invocation-name))
                 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                       "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                 ((require 'elpaca))
                 ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(add-hook 'after-init-hook 'transient-mark-mode) ;; standard highlighting
(elpaca `(,@elpaca-order))

;; Install use-package support
(elpaca elpaca-use-package
  ;; Enable :elpaca use-package keyword.
  (elpaca-use-package-mode)
  ;; Assume :elpaca t unless otherwise specified.
  (setq elpaca-use-package-by-default t))

;; Block until current queue processed.
(elpaca-wait)
#+end_src

** Global keybindings
*** Disable conflicting keybindings

#+begin_src emacs-lisp
;; This code sets up an empty keymap for C-x prefix effectively removing all default keybindings under the C-x prefix
;; If you still want to use some of the keybindings prefixed by C-x, you will need to manually rebind them using the 'general' package
;(define-key global-map (kbd "C-x") (make-sparse-keymap))
;(define-key global-map (kbd "C-h") (make-sparse-keymap))
(global-unset-key (kbd "C-x"))
(local-unset-key (kbd "C-x n"))
;(global-unset-key (kbd "M-g"))

;; Unbinding Global Keybindings
(define-key global-map (kbd "M-r") nil)
(define-key global-map (kbd "M-,") nil)
(define-key global-map (kbd "C-x C-f") nil)
(define-key global-map (kbd "M-C-n") nil)
(define-key global-map (kbd "M-C-b") nil)
(define-key global-map (kbd "M-C-f") nil)
(define-key global-map (kbd "C-z") nil)
(define-key global-map (kbd "M-SPC") nil)
(define-key global-map (kbd "C-l") nil)
(define-key global-map (kbd "C-v") nil)
(define-key global-map (kbd "C-t") nil)
(define-key global-map (kbd "M-t") nil)
(define-key global-map (kbd "M-i") nil)
(define-key global-map (kbd "C-c TAB") nil)
(define-key global-map (kbd "M-f") nil)
(define-key global-map (kbd "M-h") nil)
(define-key global-map (kbd "C-p") nil)
(define-key global-map (kbd "C-n") nil)
(define-key global-map (kbd "M-<") nil)
(define-key global-map (kbd "M->") nil)
(define-key global-map (kbd "C-f") nil)
(define-key global-map (kbd "C-b") nil)
(define-key global-map (kbd "M-f") nil)
(define-key global-map (kbd "M-b") nil)
(define-key global-map (kbd "C-y") nil)
(define-key global-map (kbd "M-j") nil)
(define-key global-map (kbd "M-k") nil)
(define-key global-map (kbd "M-l") nil)
(define-key global-map (kbd "M-b") nil)
(define-key global-map (kbd "C-@") nil)
(define-key global-map (kbd "M-RET") nil)

;; Unbinding Org Mode Keybindings
;; Unbinding the default annoying conflicting keybinds (depending on a mode)
;; It works because first it unbinds the keybind and when I have this keybind set later
;; in the config then it binds it to that keybind
(define-key org-mode-map (kbd "C-j") nil)
(define-key org-mode-map (kbd "M-h") nil)
(define-key org-mode-map (kbd "M-t") nil)
(define-key org-mode-map (kbd "C-,") nil)
(define-key org-mode-map (kbd "M-RET") nil)

;; Calendar-mode
(define-key calendar-mode-map (kbd "i h") 'nil)
(define-key calendar-mode-map (kbd "i i") 'nil)
(define-key calendar-mode-map (kbd "i B") 'nil)
(define-key calendar-mode-map (kbd "i C") 'nil)
(define-key calendar-mode-map (kbd "H") 'nil)
#+end_src

*** Keybindings without a leader key
#+begin_src emacs-lisp
;; Make escape (C-g) quit prompts
(global-set-key (kbd "C-g") 'keyboard-escape-quit)
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
;; Movement keys
(global-set-key (kbd "C-q") 'scroll-up-line)
(global-set-key (kbd "C-o") 'scroll-down-line)
(global-set-key (kbd "C-k") 'previous-line)
(global-set-key (kbd "C-j") 'next-line)
(global-set-key (kbd "C-h") 'backward-char)
(global-set-key (kbd "C-l") 'forward-char)
(global-set-key (kbd "C-f") 'forward-word)
(global-set-key (kbd "C-b") 'backward-word)
(global-set-key (kbd "C-w") 'backward-kill-word)
(global-set-key (kbd "DEL") 'kill-region-or-backward-delete)
(global-set-key (kbd "<deletechar>") 'kill-region-or-forward-delete)
(global-set-key (kbd "C-d") 'kill-region-or-forward-delete)
(global-set-key (kbd "C-u") 'tl/newline-at-end-of-line)
(global-set-key (kbd "C-\\") 'universal-argument)
(global-set-key (kbd "C-t") 'zap-up-to-char)
;; Minibuffer
(define-key minibuffer-local-map (kbd "C-j") 'next-line)
(define-key minibuffer-local-map (kbd "C-k") 'previous-line)
;; Spell-checker
(global-set-key (kbd "M-i") 'jinx-correct)
(global-set-key (kbd "M-n") 'jinx-correct-nearest)
(global-set-key (kbd "M-w") 'jinx-correct-word)
;(global-set-key (kbd "M-w") 'jinx-correct-all)
;(global-set-key (kbd "M-w") 'jinx-correct-select)

;; Info-mode
(eval-after-load 'info
  '(progn
     (define-key Info-mode-map "j" 'next-line)
     (define-key Info-mode-map "k" 'previous-line)
     (define-key Info-mode-map "l" 'forward-char)
     (define-key Info-mode-map "h" 'backward-char)
     (define-key Info-mode-map "." 'forward-paragraph)
     (define-key Info-mode-map "," 'backward-paragraph)
     (define-key Info-mode-map ";" 'recenter-top-bottom)
     (define-key Info-mode-map ":" 'move-to-window-line-top-bottom)
     (define-key Info-mode-map "e" 'end-of-line)
     (define-key Info-mode-map "a" 'beginning-of-line)
     (define-key Info-mode-map "f" 'Info-history-forward)
     (define-key Info-mode-map "b" 'Info-history-back)
     (define-key Info-mode-map "c" 'Info-follow-reference)
     (define-key Info-mode-map "o" 'Info-scroll-down-line)
     (define-key Info-mode-map "O" 'Info-scroll-up-line)
     (define-key Info-mode-map "{" 'beginning-of-buffer)
     (define-key Info-mode-map "}" 'end-of-buffer)))

;; Calendar-mode
; Navigation
(define-key calendar-mode-map "h" 'calendar-backward-day)
(define-key calendar-mode-map "k" 'calendar-backward-week)
(define-key calendar-mode-map "j" 'calendar-forward-week)
(define-key calendar-mode-map "l" 'calendar-forward-day)
(define-key calendar-mode-map "a" 'calendar-beginning-of-week)
(define-key calendar-mode-map "e" 'calendar-end-of-week)
(define-key calendar-mode-map "A" 'calendar-backward-month)
(define-key calendar-mode-map "E" 'calendar-forward-month)
(define-key calendar-mode-map "p" 'calendar-beginning-of-month)
(define-key calendar-mode-map "n" 'calendar-end-of-month)
(define-key calendar-mode-map "P" 'calendar-beginning-of-year)
(define-key calendar-mode-map "N" 'calendar-end-of-year)
(define-key calendar-mode-map "[" 'calendar-backward-year)
(define-key calendar-mode-map "]" 'calendar-forward-year)
(define-key calendar-mode-map "v" 'calendar-scroll-left-three-months)
(define-key calendar-mode-map "V" 'calendar-scroll-right-three-months)
(define-key calendar-mode-map "," 'calendar-goto-date)
; Other
(define-key calendar-mode-map (kbd "SPC") 'calendar-set-mark)
(define-key calendar-mode-map "C" 'calendar-count-days-region)
(define-key calendar-mode-map "g" 'calendar-cursor-holidays)
(define-key calendar-mode-map "G" 'calendar-list-holidays)
(define-key calendar-mode-map "L" 'calendar-lunar-phases)
(define-key calendar-mode-map "S" 'calendar-sunrise-sunset)
(define-key calendar-mode-map "s" 'calendar-sunrise-sunset-month)
(define-key calendar-mode-map "y" 'calendar-print-day-of-year)

;; Free keys: Z Y u l
(eval-after-load 'org-agenda
  '(progn
     (define-key org-agenda-mode-map (kbd "a") 'org-gtd-clarify-agenda-item)
     (define-key org-agenda-mode-map (kbd "v") 'org-gtd-area-of-focus-set-on-agenda-item)
     (define-key org-agenda-mode-map (kbd "j") 'org-agenda-next-item)
     (define-key org-agenda-mode-map (kbd "k") 'org-agenda-previous-item)
     (define-key org-agenda-mode-map (kbd "n") 'org-agenda-forward-block)
     (define-key org-agenda-mode-map (kbd "p") 'org-agenda-backward-block)
     (define-key org-agenda-mode-map (kbd "r") 'beginning-of-buffer)
     (define-key org-agenda-mode-map (kbd "m") 'org-agenda-month-view)
     (define-key org-agenda-mode-map (kbd "SPC") 'org-agenda-bulk-toggle)
     (define-key org-agenda-mode-map (kbd "A") 'org-agenda-bulk-toggle-all)
     (define-key org-agenda-mode-map (kbd "G") 'org-agenda-holidays)
     (define-key org-agenda-mode-map (kbd "B") 'org-agenda-bulk-action)
     (define-key org-agenda-mode-map (kbd "Q") 'org-agenda-exit)
     (define-key org-agenda-mode-map (kbd ",") 'org-agenda-goto-date)
     (define-key org-agenda-mode-map (kbd "<") 'org-agenda-date-prompt)
     (define-key org-agenda-mode-map (kbd "V") 'org-agenda-view-mode-dispatch)
     (define-key org-agenda-mode-map (kbd "E") 'org-agenda-priority)	 
     (define-key org-agenda-mode-map (kbd "L") 'org-agenda-log-mode)
     (define-key org-agenda-mode-map (kbd "U") 'org-agenda-clock-cancel)
     (define-key org-agenda-mode-map (kbd "h") 'org-agenda-show-tags)
     (define-key org-agenda-mode-map (kbd "H") 'org-agenda-set-tags)
     (define-key org-agenda-mode-map (kbd "[") 'org-agenda-show-scroll-down)
     (define-key org-agenda-mode-map (kbd "]") 'org-agenda-show-and-scroll-up)
     (define-key org-agenda-mode-map (kbd "T") 'org-agenda-toggle-time-grid)
     (define-key org-agenda-mode-map (kbd "M") 'org-agenda-toggle-deadlines)
     (define-key org-agenda-mode-map (kbd "C") 'org-agenda-capture)
     (define-key org-agenda-mode-map (kbd "x") 'tl/org-agenda-done)
     (define-key org-agenda-mode-map (kbd "X") 'tl/org-agenda-mark-done-and-add-followup)
     (define-key org-agenda-mode-map (kbd "N") 'tl/org-agenda-new)
     (define-key org-agenda-mode-map (kbd "P") 'org-agenda-append-agenda)
     (define-key org-agenda-mode-map (kbd "W") 'org-agenda-open-link)
     ;(define-key org-agenda-mode-map (kbd ";") 'org-agenda-archive)
     ;(define-key org-agenda-mode-map (kbd ":") 'org-agenda-archive-default-with-confirmation)
     ;; Unbinding the keybinds I don't use
     (define-key org-agenda-mode-map (kbd ";") 'nil)
     (define-key org-agenda-mode-map (kbd ":") 'nil)
     (define-key org-agenda-mode-map (kbd ">") 'nil)
     (define-key org-agenda-mode-map (kbd "~") 'nil)
     (define-key org-agenda-mode-map (kbd "#") 'nil)
     (define-key org-agenda-mode-map (kbd "$") 'nil)
     (define-key org-agenda-mode-map (kbd "^") 'nil)
     (define-key org-agenda-mode-map (kbd "?") 'nil)
     (define-key org-agenda-mode-map (kbd "{") 'nil)
     (define-key org-agenda-mode-map (kbd "}") 'nil)
     (define-key org-agenda-mode-map (kbd "C-c C-w") 'nil)
     (define-key org-agenda-mode-map (kbd "*") 'nil)))

;; Zero-width space (this is an exception keybinding)
;(global-set-key (kbd "C-c C-SPC")
;                (lambda () (interactive) (insert "\u200B")))
#+end_src

** General keybindings
*** C-x leader key
#+begin_src emacs-lisp
;; Org tansclusion package
(use-package general
  :config

  (general-create-definer tl/leader-keys
    :prefix "C-x") ;; Set leader key

  (tl/leader-keys
    "," '(consult-recent-file :wk "Find recent files")
    "." '(find-file :wk "Find file")
    "C-b" '(consult-buffer :wk "Switch to buffer")
    "y" '(consult-yank-pop :wk "Clipboard history")
    "i" '(org-gtd-process-inbox :wk "Process inbox")
    "l" '(tl/jinx-toggle-single-dictionary :wk "Switch between dictionaries")
    "B" '(org-gtd-clarify-switch-to-buffer :wk "Switch to clarify buffer")
    "C-k" '(consult-kmacro :wk "Select macro to run")	
	  ;"C-p" '(find-file-at-point :wk "Find file at point")
    ;"C-q" '(delete-frame :wk "Delete frame")
    ;"C-L" '(tl/log-entry :wk "Use log entry")
    ;"C-l" '(tl/log-entry-small :wk "Use small log entry")
    ;"C-k" '(tl/report-entry :wk "Use report entry")
    "t" '(org-transclusion-add :wk "Add org transclusion")
    "C-l" '(gptel-send-with-options :wk "Switch window")  ;; minibuffer to echo area
    "C-p" '(tl/better-previous-buffer :wk "Previous Buffer")
    "C-n" '(tl/better-next-buffer :wk "Next Buffer")
    "C-u" '(kill-this-buffer :wk "Kill current buffer")
    "C-q" '(save-buffers-kill-terminal :wk "Exit Emacs")
    "O" '(tl/buffer-org-new :wk "New empty org buffer")
    "C-j" '(dashboard-open :wk "Open emacs dashboard")
    "C-s" '(basic-save-buffer :wk "Save buffer")
    "a" '(mark-whole-buffer :wk "Mark whole buffer")
	  "TAB" '(comment-dwim :wk "Comment lines")
	  "o" '(tl/open-image-external-from-org :wk "Open image in swappy")
	  "v" '(tl/open-video-link-in-mpv :wk "Open video in mpv")
    "C" '(org-goto-calendar :wk "Calendar")
    ;; Org-table
    "\\" '(org-table-create-or-convert-from-region :wk "Create empty table or convert from region")
    "-" '(org-table-insert-hline :wk "Insert horizontal line")
    "j" '(org-table-copy-down :wk "Copy the value of the field below")
    "h" '(org-table-insert-row :wk "Insert a new row above the current line")
    "k" '(org-table-kill-row :wk "Delete the current row or horizontal line")
    "u" '(org-table-delete-column :wk "Delete a column")
    "z" '(org-table-blank-field :wk "Blank field or active region")
	  ;; Window management
    "c" '(clone-indirect-buffer-other-window :wk "Clone indirect buffer in new window")
    "q" '(delete-window :wk "Delete window")
    "Q" '(delete-other-windows :wk "Delete other windows")
    "C-o" '(other-window :wk "Switch window")
    "m" '(toggle-window-maximize :wk "Toggle window maximization")
    "b" '(split-window-below :wk "Split window below")
    "C->" '(enlarge-window :wk "Enlarge window")  
    "C-<" '(shrink-window :wk "Shrink window")
    "/" '(balance-windows :wk "Balance windows")
    "w" '(ace-swap-window :wk "Swap windows"))
    ;"C-c" '(split-window-right :wk "Split window right")
    ;"C-c" '(split-window-vertically :wk "Split window vertically")
    ;"C-c" '(split-window-horizontally :wk "Split window horizontally"))

    ;; Unbound
    ;"C-c" '(clone-indirect-buffer :wk "Create indirect buffer copy in a split")
	  ;"i" '(ibuffer :wk "Ibuffer")                 ; I don't use it
    ;"K" '(kill-some-buffers :wk "Kill multiple buffers")
    ;; "r" '(revert-buffer :wk "Reload buffer")   ;; Key unavailable
	  ;"C-s" '(save-some-buffers :wk "Save multiple buffers")
    ;; Bookmarks
    ;"C-l" '(list-bookmarks :wk "List bookmarks")
    ;"C-m" '(bookmark-set :wk "Set bookmark")
    ;"C-d" '(bookmark-delete :wk "Delete bookmark")
    ;"C-f" '(bookmark-save :wk "Save current bookmarks to bookmark file")

  (tl/leader-keys
    "C-c" '(:ignore t :wk "Consult")
	  ;; Navigation
    "C-c C-f" '(consult-fd :wk "Find")
    "C-c C-r" '(consult-ripgrep :wk "Ripgrep")
    "C-c C-m" '(consult-mark :wk "Jump to marker")
    "C-c C-n" '(consult-global-mark :wk "Jump to global marker")
    "C-c C-o" '(consult-outline :wk "Outline heading")
    "C-c C-g" '(consult-goto-line :wk "Go to line")
    "C-c C-e" '(consult-git-grep :wk "Search with git grep")
    "C-c C-a" '(consult-org-agenda :wk "Go to org agenda heading")
    "C-c C-h" '(consult-org-heading :wk "Go to org heading")
	  ;; Search 
    "C-c C-l" '(consult-line :wk "Search for line")
    "C-c C-u" '(consult-line-multi :wk "Search for line in multiple buffers")
    "C-c C-k" '(consult-keep-lines :wk "Select lines with a live preview")
    "C-c C-f" '(consult-focus-lines :wk "Hide/Show lines using overlays")
	  ;; Editing
    "C-c C-y" '(consult-yank-from-kill-ring :wk "Yank from kill ring history")
    "C-c C-p" '(consult-yank-replace :wk "Yank replace from kill ring history")
    "C-c C-b" '(consult-bookmark :wk "Bookmark"))
	  ;; Registers
    ;"C-c C-Y" '(consult-register :wk "Load register and jump to location or insert the stored text")
    ;"C-c C-Y" '(consult-register-load :wk "Load a register")
    ;"C-c C-Y" '(consult-register-store :wk "Store a register")

	(tl/leader-keys
    "C-f" '(:ignore t :wk "Clock")
    "C-f C-t" '(org-timer-set-timer :wk "Agenda overview")
    "C-f C-a" '(org-timer-start :wk "Area of focus")
    "C-f C-s" '(org-timer-stop :wk "Agenda by low efforts")
    "C-f C-i" '(org-timer-item :wk "Agenda today")
    "C-f C-c" '(org-timer-pause-or-continue :wk "Agenda by low efforts"))

	(tl/leader-keys
    "C-a" '(:ignore t :wk "Agenda")
    "C-a C-o" '(tl/org-agenda-o :wk "Agenda overview")
    "C-a C-t" '(tl/org-agenda-t :wk "Agenda today")
    "C-a C-e" '(tl/org-agenda-e :wk "Agenda by low efforts")
    "C-a C-f" '(org-gtd-review-area-of-focus :wk "Area of focus"))
    ;; I don't use those at the moment
    ;"a o" '(org-gtd-engage-grouped-by-context :wk "Organized agenda")
    ;"a g" '(org-gtd-engage :wk "GTD agenda")
    ;"a m" '(org-gtd-oops :wk "Missed appointments")
    ;"a t" '(org-gtd-review-stuck-* :wk "Any action types")

  (tl/leader-keys
    "C-h" '(:ignore t :wk "Help")
    "C-h C-h" '(help-for-help :wk "Get help")
    "C-h C-i" '(Info-goto-emacs-command-node :wk "Go to info mode in emacs MANUAL for command")
    "C-h C-o" '(info :wk "Enter info, the documentation browser")
    "C-h C-e" '(info-emacs-manual :wk "Display emacs manual in info mode")
    "C-h C-q" '(info-display-manual :wk "Display info buffer displaying MANUAL")
    "C-h C-d" '(describe-mode :wk "Display documentation of current modes")
    "C-h C-f" '(describe-function :wk "Describe function")
    "C-h C-k" '(describe-key-briefly :wk "Describe key briefly")
    "C-h C-l" '(describe-key :wk "Describe key")
    "C-h C-r" '((lambda () (interactive)
              (load-file "~/.config/emacs/init.el")
              (ignore (elpaca-process-queues)))
              :wk "Reload emacs"))

  (tl/leader-keys
    "C-t" '(:ignore t :wk "Toggle")
    "C-t C-l" '(display-line-numbers-mode :wk "Toggle line numbers")
    "C-t C-t" '(visual-line-mode :wk "Toggle truncated lines")
    "C-t C-h" '(hl-line-mode :wk "Toggle line highlight in frame")
    "C-t C-i" '(org-indent-mode :wk "Toggle indentation mode")
    "C-t C-m" '(toggle-mode-line :wk "Toggle mode line")
    "C-t C-H" '(global-hl-line-mode :wk "Toggle line highlight globally")
    "C-t C-T" '(org-transclusion-mode :wk "Org Transclusion mode"))

  (tl/leader-keys
    "C-e" '(:ignore t :wk "Eval/Edit File")
    "C-e C-r" '(eval-region :wk "Evaluate a region")
    "C-e C-b" '(eval-buffer :wk "Evaluate a buffer")
    "C-e C-e" '(org-export-dispatch :wk "Org export dispatch")
    "C-e C-t" '(org-babel-tangle :wk "Org babel tangle")
    "C-e C-g" '(find-grep-dired :wk "Search for string in files in DIR")
    "C-e C-d" '((lambda () (interactive) (dired "~/.config/emacs/")) :wk "Open user-emacs-directory in dired")
    "C-e C-c" '(lambda () (interactive) (find-file "~/.config/emacs/config.org"))
    "C-e C-s" '(lambda () (interactive) (find-file "~/desktop/workspace/dotfiles/.config/emacs/emacs-cheatsheet.org")))

  (which-key-add-key-based-replacements 
    "C-x e c" "Edit config"
    "C-x e s" "Edit emacs cheatsheet")

  (tl/leader-keys
    "C-d" '(:ignore t :wk "Dired")
    "C-d ." '(dired :wk "Open dired")
    "C-d C-f" '(wdired-finish-edit :wk "Writable dired finish edit")
    "C-d C-w" '(wdired-change-to-wdired-mode :wk "Writable dired")
    "C-d C-j" '(dired-jump :wk "Dired jump to current")
    "C-d C-d" '(delete-this-file :wk "Delete file")
    "C-d C-r" '(rename-this-file-and-buffer :wk "Rename file")
    "C-d C-p" '(peep-dired :wk "Peep-dired"))

  (tl/leader-keys
    "C-r" '(:ignore t :wk "Registers")
    "C-r C-c" '(copy-to-register :wk "Copy to register")
    "C-r C-f" '(frameset-to-register :wk "Frameset to register")
    "C-r C-i" '(insert-register :wk "Insert contents of register")
    "C-r C-j" '(jump-to-register :wk "Jump to register")
    "C-r C-l" '(list-registers :wk "List registers")
    "C-r C-n" '(number-to-register :wk "Number to register")
    "C-r C-r" '(register :wk "Interactively choose a register")
    "C-r C-v" '(view-register :wk "View a register")
    "C-r C-w" '(window-configuration-to-register :wk "Window configuration to register")
    "C-r C-+" '(increment-register :wk "Increment register")
    "C-r C-SPC" '(point-to-register :wk "Point to register"))
#+end_src

*** C-c leader key

#+begin_src emacs-lisp
;; Org bullet list navigation
;(define-key org-mode-map (kbd "C-M-f") 'org-shiftright)
;(define-key org-mode-map (kbd "C-M-b") 'org-shiftleft)
;(define-key org-mode-map (kbd "C-M-p") 'org-shiftup)
;(define-key org-mode-map (kbd "C-M-n") 'org-shiftdown)

;; Set up 'C-c' as the global leader key
(general-define-key
 :prefix "C-c"
 :keymaps 'org-mode-map
 ;; Org-mode - available keys: C-z, C-x, C-b
 "C-h" '(org-metaleft :wk "Org metaleft")
 ;"C-j" '(org-shiftdown :wk "Org metadown")
 ;"C-k" '(org-shiftup :wk "Org metaup")
 "C-k" '(org-metaup :wk "Org metadown")
 "C-j" '(org-metadown :wk "Org metaup")
 "C-l" '(org-metaright :wk "Org metaright")
 "C-p" '(org-previous-visible-heading :wk "Previous visible heading")
 "C-n" '(org-next-visible-heading :wk "Next visible heading")
 "," '(org-todo :wk "Org set todo")
 "." '(org-priority :wk "Org set priority")
 "C-_" '(org-set-tags-command :wk "Org set tag")
 ;"C-p" '(org-set-property :wk "Org set property")
 "C-e" '(org-set-effort :wk "Org set effort")
 "C-f" '(tl/org-insert-file-link :wk "Org insert file link")
 "F" '(org-insert-links-to-directory :wk "Insert all links to directory")
 "C-w" '(org-insert-link :wk "Org insert link")
 "C-a" '(tl/insert-any-date :wk "Insert any date")
 "C-t" '(tl/insert-todays-date :wk "Insert today's date")
 "/" '(org-time-stamp :wk "Org timestamp")
 "C-y" '(tl/org-insert-screenshot :wk "Insert current screenshot")
 ;"C-y" '(insert-current-time :wk "Insert current time")      ;; key bound to insert screenshot
 "C-v" '(org-toggle-heading :wk "Toggle heading")
 "C-i" '(org-toggle-item :wk "Toggle item")
 "C-m" '(org-insert-todo-heading :wk "Insert todo heading")
 "h" '(widen :wk "Widen")
 "j" '(tl/org-narrow-forward :wk "Narrow forward")
 "k" '(tl/org-narrow-backward :wk "Narrow backward")
 "l" '(org-narrow-to-subtree :wk "Narrow to subtree")
 "C-u" '(org-narrow-to-block :wk "Narrow to block")
 ;"C-e" '(org-narrow-to-element :wk "Narrow to element")
 ;"C-g" '(org-show-current-heading-tidily :wk "Focus current heading hiding other ones")
 "C-q" '(org-insert-subheading :wk "Insert subheading")
 "C-r" '(org-insert-heading-respect-content :wk "Insert heading on the same level")
 "z" '(org-footnote-action :wk "Insert footnote")
 ;; Org-Roam
 "p" '(completion-at-point :wk "Complete at point")
 "r" '(org-roam-buffer-toggle :wk "Toggle Org roam buffer")
 "f" '(org-roam-node-find :wk "Find Org roam node")
 ;"L" '(org-roam-node-insert :wk "Insert Org roam node")
 "L" '(org-roam-node-insert-immediate :wk "Insert Org roam node immediatelly")
 "i" '(org-id-get-create :wk "Insert id for Org heading")
 "g" '(org-roam-graph :wk "Show Org roam graph")
 "c" '(org-gtd-capture :wk "Capture to inbox")
 "C" '(org-roam-capture :wk "Capture to node")
 "u" '(org-roam-ui-open :wk "Open Org roam UI")
 "s" '(org-roam-db-sync :wk "Sync Org roam db")
 ;; Org-Roam dailies
     ;- org-roam-dailies-goto-next-note
     ;- org-roam-dailies-goto-previous-note
 "n" '(org-roam-dailies-capture-today :wk "Capture daily today")
 "N" '(org-roam-dailies-goto-today :wk "Go to daily today")
 ;"y" '(org-roam-dailies-capture-yesterday :wk "Capture daily yesterday")
 "Y" '(org-roam-dailies-goto-yesterday :wk "Go to daily yesterday")
 ;"t" '(org-roam-dailies-capture-tomorrow :wk "Capture to daily tomorrow")
 "T" '(org-roam-dailies-goto-tomorrow :wk "Go to daily tomorrow")
 "d" '(org-roam-dailies-capture-date :wk "Capture daily in date")
 "D" '(org-roam-dailies-goto-date :wk "Go to daily in date"))
#+end_src

*** C-v leader key

#+begin_src emacs-lisp
(general-define-key
 :prefix "C-v"
 ;; Symbol-overlay
 "C-u" '(symbol-overlay-put :wk "Symbol put")
 "C-n" '(symbol-overlay-jump-next :wk "Symbol jump next")
 "C-p" '(symbol-overlay-jump-prev :wk "Symbol jump prev")
 ;"M-P" '(symbol-overlay-jump-first :wk "Symbol jump first")
 ;"M-N" '(symbol-overlay-jump-last :wk "Symbol jump last")
 "C-s" '(symbol-overlay-save-symbol :wk "Symbol save")
 "C-f" '(symbol-overlay-switch-forward :wk "Symbol switch forward")
 "C-b" '(symbol-overlay-switch-backward :wk "Symbol switch backward")
 "C-a" '(symbol-overlay-remove-all :wk "Symbol remove all")
 "C-t" '(symbol-overlay-toggle-in-scope :wk "Symbol toggle in scope")
 "C-e" '(symbol-overlay-echo-mark :wk "Symbol echo mark")
 "C-d" '(symbol-overlay-jump-to-definition :wk "Symbol jump to definition")
 "C-i" '(symbol-overlay-query-isearch-literally :wk "Symbol isearch")
 "C-r" '(symbol-overlay-query-replace :wk "Symbol query replace")
 "C-w" '(symbol-overlay-rename :wk "Symbol rename")
 ;; Expand-region
 "e" '(er/mark-org-element :wk "Mark element")       
 "b" '(er/mark-org-code-block :wk "Mark code block")
 "p" '(er/mark-paragraph :wk "Mark paragraph")
 "w" '(er/mark-word :wk "Mark word")
 "h" '(er/mark-symbol :wk "Mark symbol")
 "H" '(er/mark-symbol-with-prefix :wk "Mark symbol with prefix")
 "a" '(er/mark-next-accessor :wk "Mark next accessor")
 "," '(er/mark-method-call :wk "Mark method call")
 "q" '(er/mark-inside-quotes :wk "Mark inside quotes")
 "Q" '(er/mark-outside-quotes :wk "Mark outside quotes")
 "j" '(er/mark-inside-pairs :wk "Mark inside pairs")
 "J" '(er/mark-outside-pairs :wk "Mark outside pairs")
 "k" '(er/mark-comment :wk "Mark comment")
 "u" '(er/mark-url :wk "Mark URL")
 "E" '(er/mark-email :wk "Mark email")
 "d" '(er/mark-defun :wk "Mark defun")
 "l" '(er/mark-sentence :wk "Mark sentence")
 ;; Copy surround automation
 "c" '(copy-surrounded-by-equals :wk "Copy org equals command")
 "m" '(copy-surrounded-by-stars :wk "Copy org stars command")
))
#+end_src

* Preferences
** Better defaults

#+begin_src emacs-lisp
(setq-default
 fill-column 120
 buffers-menu-max-size 30
 case-fold-search t
 column-number-mode t
 tab-width 4
 mouse-yank-at-point t
 save-interprogram-paste-before-kill t
 set-mark-command-repeat-pop t
 tooltip-delay .8
 ring-bell-function 'ignore)
(global-goto-address-mode t)
(setq browse-url-browser-function #'browse-url-xdg-open)

;; Location data for sunrise-sunset commands
(setq calendar-latitude 52.23)
(setq calendar-longitude 21.01)
(setq calendar-location-name "Warsaw, PL")

(delete-selection-mode 1)                         ; You can select text in insert mode (mouse) and delete it by typing
;(electric-indent-mode -1)                         ; Electric indent mode makes Org mode source blocks have some really weird and annoying default indentation behavior
(electric-pair-mode 1)                            ; Turns on automatic parens pairing
(menu-bar-mode -1)                                ; Disable menu bar
(tool-bar-mode -1)                                ; Disable tool bar
(scroll-bar-mode -1)                              ; Disable scroll bar
(tooltip-mode -1)                                 ; Disable tooltips
(global-display-line-numbers-mode -1)             ; Disable displaying line numbers
(global-visual-line-mode t)                       ; Display truncated lines
(global-auto-revert-mode t)                       ; Automatically show changes if the file has changed
(fringe-mode -1)                                  ; Disable the narrow areas on the sides of the emacs window
(save-place-mode 1)                               ; Open files back up at same position
(recentf-mode 1)                                  ; Remember recently edited files
(global-hl-line-mode t)                           ; Highlights the current line of the point    

(setq-default
 window-combination-resize t                      ; Take new window space from all other windows (not just current)
 x-stretch-cursor t)                              ; Stretch cursor to the glyph width

(setq undo-limit 80000000                         ; Raise undo-limit to 80Mb
 truncate-string-elipsis "…"                      ; Unicode ellispis are nicer than "...", and also save /precious/ space
 display-time-default-load-average nil            ; I don't think I've ever found this useful
 use-dialog-box nil                               ; This setting disables the display of dialog boxes, such as confirmation or warning pop-ups
 use-file-dialog nil                              ; This setting disables the use of file selection dialogs, instead emacs will rely on command-line or programmatic methods for file operations
 display-line-numbers-type 'relative              ; Relative line numbers are fantastic for knowing how far away line numbers are, then 12 <UP> gets you exactly where you think
 display-line-numbers-width 3                     ; Line numbers width
 blink-cursor-mode nil                            ; I hate blinking cursors
 inhibit-startup-message t)                       ; Prevent the default initial splash screen from being displayed when you start Emacs

;; Prefer vertical splits - does not work
;(setq split-width-threshold nil)
;(setq split-height-threshold 40) ; Adjust this value as needed

;; Prevent Emacs from splitting windows, using kitty for splits instead
;(setq split-window-preferred-function nil)

;; Don't create automatic backup files in their original directories (e.g. file.el~). Put all backups in the Trash directory
(setq backup-directory-alist '((".*" . "~/.config/.local/share/Trash/files")))

(display-time-mode 1)                             ; Enable time in the mode-line
(global-subword-mode 1)                           ; Iterate through CamelCase words
;(defalias 'yes-or-no-p 'y-or-n-p)                 ; Use 'y' or 'n' instead of 'yes' or 'no'

(unless (string-match-p "^Power N/A" (battery))   ; On laptops
  (display-battery-mode 1))                       ; it's nice to know how much power you have

;; Set src block automatic indent to 0 instead of 2
(setq org-edit-src-content-indentation 0)

;; Revert Dired and other buffers
(setq global-auto-revert-non-file-buffers t)

;; Bookmarks location
(setq bookmark-default-file "~/.config/emacs/bookmarks")

;; Use only system clipboard - I wish it worked but I'm on wayland
;(setq x-select-enable-clipboard t)
#+end_src

** Littering
*** Buffer Litter

#+begin_src emacs-lisp
;; Kill *Help* after :q'ing
(advice-add #'evil-quit :after (lambda (&rest r)
  (let ((buf (get-buffer "*Help*")))
    (if (eq buf nil) nil
      (kill-buffer buf)))))

;; Disables all startup warnings, and kills message buffer, comment this out when debugging
(setq warning-minimum-level :emergency)
;(setq-default message-log-max nil)
;(add-hook 'emacs-startup-hook (lambda () ;Kills the warning buffer for even emergency messages
;  (kill-buffer (get-buffer "*Messages*"))))
#+end_src

*** File litter

#+begin_src emacs-lisp
(setq make-backup-files nil ; stop creating ~ files
      auto-save-default nil ; Disable autosave # files
      create-lockfiles nil  ; Disable .# files
      ;; Prevent emacs from trying to write to init.el
      custom-file (concat user-emacs-directory "trash.el"))
#+end_src

** Scrolling

#+begin_src emacs-lisp 
(setq-default pixel-scroll-precision-mode t
              fast-but-imprecise-scrolling t
              mouse-wheel-scroll-amount '(1 ((shift) . 1))  ;; one line at a time
              mouse-wheel-progressive-speed nil             ;; don't accelerate scrolling
              mouse-wheel-follow-mouse t                    ;; scroll window under mouse
              mouse-wheel-tilt-scroll t
              scroll-margin 7                               ;; It's nice to maintain a little margin
              scroll-preserve-screen-position t
              scroll-conservatively 10)
#+end_src

** Fonts

#+begin_src emacs-lisp
(set-face-attribute 'default nil
  :font "MesloLGM Nerd Font"
  ;;:height 110
  :height 120
  :weight 'medium)
(set-face-attribute 'variable-pitch nil
  ;;:font "Ubuntu Nerd Font"
  :font "MesloLGM Nerd Font"
  ;;:height 120
  :height 130
  :weight 'medium)
(set-face-attribute 'fixed-pitch nil
  :font "MesloLGM Nerd Font"
  ;;:height 110
  :height 120
  :weight 'medium)
;; Makes commented text and keywords italics.
;; This is working in emacsclient but not emacs.
;; Your font must have an italic face available.
(set-face-attribute 'font-lock-comment-face nil
  :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
  :slant 'italic)

;; This sets the default font on all graphical frames created after restarting Emacs.
;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
;; are not right unless I also add this method of setting the default font.
(add-to-list 'default-frame-alist '(font . "MesloLGM Nerd Font-12"))

;; Uncomment the following line if line spacing needs adjusting.
(setq-default line-spacing 0.12)
#+end_src

** Misc

#+begin_src emacs-lisp
;; emacs -nw settings
(unless (display-graphic-p)
  ;; Disable $ on truncated lines
  (set-display-table-slot standard-display-table 'truncation 32)
  (xterm-mouse-mode 1)) ; Enable mouse in term-mode

(setq use-short-answers t ; Set y or n instead of yes or no for questions
      comment-empty-lines t ; Comment empty lines in selecetd region too
      initial-scratch-message ";; The system plays us everyday

"
      display-line-numbers-type 'relative ; Realive line numbers
      frame-resize-pixelwise t) ; Better frame resizing
(setq-default tab-width 2 ; self explanitory
              indent-tabs-mode nil ; use spaces not tabs
              truncate-lines t) ;Allow truncated lines
(electric-indent-mode t) ; Auto Indent
;(global-display-line-numbers-mode 1) ; Display line numbers
#+end_src

* UI Configuration
** All-the-icons
This is an icon set that can be used with dashboard, dired, ibuffer and other Emacs programs. 
*NOTE*: The first time you load your configuration on a new machine, you'll need to run =M-x all-the-icons-install-fonts= so that mode line icons display correctly.

#+begin_src emacs-lisp
(use-package all-the-icons)
  :ensure t
  :if (display-graphic-p)

(use-package all-the-icons-dired
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

** Color theme
I'm using [[https://github.com/cyruseuros/ewal][ewal]], a terminal-aware Emacs theme generator to match my pywal-based setup.

#+begin_src emacs-lisp
;; Load defined themes
(use-package doom-themes
  ;:init (load-theme 'doom-tokyo-night t)
  :init (load-theme 'doom-moonlight t)
  :config
  (setq doom-themes-enable-bold t      ; if nil, bold is universally disabled
        doom-themes-enable-italic t))   ; if nil, italics is universally disabled

;; Correct colors to match kitty terminal for transparency
(set-face-attribute 'default nil :background "#040305")
(set-face-attribute 'line-number nil :background "#040305")
(set-face-attribute 'org-block nil :background "#0e0e16")
(set-face-attribute 'mode-line nil :background "#0B0B10")
(set-face-attribute 'mode-line-inactive nil :background "#0B0B10")
(set-face-attribute 'hl-line nil :background "#0B0B10")

;; Use pywal auto-generated color scheme
;; (use-package ewal
;;   :init (setq ewal-use-built-in-always-p nil
;;               ewal-use-built-in-on-failure-p t
;;               ewal-built-in-palette "sexy-material"))

;; (use-package ewal-spacemacs-themes
;;   :init (progn
;;           (setq spacemacs-theme-underline-parens t
;;                 my:rice:font (font-spec
;;                               :family "MesloLGM Nerd Font"
;;                               :weight 'semi-bold
;;                               :size 11.0))
;;           (show-paren-mode +1)
;;           (set-frame-font my:rice:font nil t)
;;           (add-to-list  'default-frame-alist
;;                         `(font . ,(font-xlfd-name my:rice:font))))
;;   :config (progn
;;             (load-theme 'ewal-spacemacs-modern t)
;;             (enable-theme 'ewal-spacemacs-modern)))
#+end_src

** Mode line

#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :config
  (setq doom-modeline-height 15      ;; Sets modeline height
        doom-modeline-bar-width 5    ;; Sets right bar width
        doom-modeline-persp-name t   ;; Adds perspective name to modeline
        doom-modeline-persp-icon t)) ;; Adds folder icon next to persp name

;; Changing font size for doom modeline (default 1.0)
;(custom-set-faces
;  '(mode-line ((t (:family "JetBrains Mono Nerd Font" :height 0.95))))
;  '(mode-line-active ((t (:family "JetBrains Mono Nerd Font" :height 0.95))))
;  '(mode-line-inactive ((t (:family "JetBrains Mono Nerd Font" :height 0.95)))))
#+end_src

** Toggle mode line
Function =toggle-mode-line= toggles the display of the mode line on and off.
When called interactively, it checks if the mode line is currently visible by comparing it to nil.
If it is visible, it sets the mode-line-format to the default value, effectively hiding the mode line.
If it is not visible, it sets the mode-line-format to nil, showing the mode line.
Finally, it redraws the display to reflect the changes.

#+begin_src emacs-lisp
(defun toggle-mode-line ()
  "toggles the modeline on and off"
       (interactive)
       (setq mode-line-format
             (if (equal mode-line-format nil)
                 (default-value 'mode-line-format)))
       (redraw-display))
#+end_src

** File names for org-roam
Adjust org-roam file names in similary way I have in the window title.

#+begin_src emacs-lisp
(defadvice doom-modeline-buffer-file-name (around doom-modeline--buffer-file-name-roam-aware-a activate)
  (if (string-match-p (concat "^" (regexp-quote org-roam-directory))
                      (or buffer-file-name ""))
      (setq ad-return-value
            (replace-regexp-in-string
             "\\(?:^\\|.*/\\)\\([0-9]\\{4\\}\\)\\([0-9]\\{2\\}\\)\\([0-9]\\{2\\}\\)[0-9]*-"
             "🢔(\\1-\\2-\\3) "
             (subst-char-in-string ?_ ?  buffer-file-name)))
    ad-do-it))
#+end_src

** Which-key

#+begin_src emacs-lisp
(use-package which-key
  :init
    (which-key-mode 1)
  :config
  (setq which-key-side-window-location 'bottom
	  which-key-sort-order #'which-key-key-order-alpha
	  which-key-sort-uppercase-first nil
	  which-key-add-column-padding 1
	  which-key-max-display-columns nil
	  which-key-min-display-lines 6
	  which-key-side-window-slot -10
	  which-key-side-window-max-height 0.25
	  which-key-idle-delay 0.5
	  which-key-max-description-length 25
	  which-key-allow-imprecise-window-fit nil
	  which-key-separator " → " ))

;; Disable line-numbers in *which-key* buffers
(add-hook 'which-key-mode-hook (lambda () (display-line-numbers-mode -1)))
#+end_src

** Dashboard

#+begin_src emacs-lisp
(use-package dashboard
  :ensure t 
  :init
  (setq initial-buffer-choice 'dashboard-open)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title nil)
  (setq dashboard-startup-banner "~/.config/emacs/assets/dash.png")  ;; use custom image as banner
  (setq dashboard-center-content t) ;; center the content
  (setq dashboard-items '((recents . 5)
                          (agenda . 5 )
                          (bookmarks . 3)
                          (registers . 3)))
  :config
  (dashboard-setup-startup-hook))
#+end_src

** Transparency
It's always better to set transparency in option for respective applications that supports it rather than setting it in window manager.

#+begin_src emacs-lisp
;(add-to-list 'default-frame-alist '(alpha-background . 90)) ; For all new frames henceforth
#+end_src

** Centaur-tabs
[[https://github.com/ema2159/centaur-tabs][Centaur Tabs]] is an Emacs package that enhances the tab bar functionality, providing a more visually appealing way to manage multiple open buffers. No point if using Emacs TUI.

#+begin_src emacs-lisp
;(use-package centaur-tabs
;  :if window-system
;  :ensure t
;  :demand
;  :init
;  ;; Set the style to rounded with icons
;  (setq centaur-tabs-style "bar"
;        centaur-tabs-set-icons t
;        centaur-tabs-height 26
;        centaur-tabs-modified-marker "o"
;        centaur-tabs-close-button ""
;        centaur-tabs-set-bar 'above
;        centaur-tabs-gray-out-icons 'buffer)
;  :config
;  ;; Enable centaur-tabs
;  (centaur-tabs-mode t))
;; (setq x-underline-at-descent-line t)

;(global-set-key (kbd "M-F") 'centaur-tabs-move-current-tab-to-right)
;(global-set-key (kbd "M-B") 'centaur-tabs-move-current-tab-to-left)
;(global-set-key (kbd "M-U") 'centaur-tabs-kill-other-buffers-in-current-group)
;(global-set-key (kbd "M-o") 'centaur-tabs--create-new-tab)
#+end_src

** File encoding
When we have the default file encoding (LF UTF-8), it really isn’t worth noting in the modeline.

#+begin_src emacs-lisp
;; Setting up default encoding
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)

(defun doom-modeline-conditional-buffer-encoding ()
  "Hide modeline encoding indicator for LF UTF-8."
  (setq-local doom-modeline-buffer-encoding
              (and (memq (coding-system-category buffer-file-coding-system) '(undecided utf-8))
                   (memq (coding-system-eol-type buffer-file-coding-system) '(0)))
              ))

(add-hook 'after-change-major-mode-hook 'doom-modeline-conditional-buffer-encoding)
#+end_src

** Ansi colours
It’s nice to see ANSI colour codes displayed, however I don’t want to disrupt ANSI codes in =Org= src blocks. 

#+begin_src emacs-lisp
(add-hook 'text-mode-hook
  (lambda ()
    (unless (derived-mode-p 'org-mode)
      ;; Apply ANSI color codes
      (with-silent-modifications
        (ansi-color-apply-on-region (point-min) (point-max) t)))))
#+end_src

** YouTube link export
The =[[yt:...]]= links preview nicely, but don’t export nicely.

#+begin_src emacs-lisp
(org-link-set-parameters "yt" :export #'+org-export-yt)
(defun +org-export-yt (path desc backend _com)
  (cond ((org-export-derived-backend-p backend 'html)
         (format "<iframe width='440' \
height='335' \
src='https://www.youtube.com/embed/%s' \
frameborder='0' \
allowfullscreen>%s</iframe>" path (or "" desc)))
        ((org-export-derived-backend-p backend 'latex)
         (format "\\href{https://youtu.be/%s}{%s}" path (or desc "youtube")))
        (t (format "https://youtu.be/%s" path))))
#+end_src

* Editing Features
** Improved file management
Function =delete-this-file= deletes the current file and kills the buffer associated with it.
It first checks if there is a file being edited in the buffer.
If not, it throws an error.
Then, it prompts the user for confirmation to delete the file. If the user confirms, it proceeds to delete the file using delete-file and kills the buffer using =kill-this-buffer=.

Function =rename-this-file-and-buffer= renames both the current buffer and the file it’s visiting to a new name specified by the user.
It takes user input for the new name using the interactive keyword, checks if the buffer is visiting a file, renames the file if it exists, updates the visited file name, and renames the buffer accordingly.

#+begin_src emacs-lisp
(defun delete-this-file ()
  "Delete the current file, and kill the buffer."
  (interactive)
  (unless (buffer-file-name)
    (error "No file is currently being edited"))
  (when (yes-or-no-p (format "Delete file '%s'?"
                             (file-name-nondirectory buffer-file-name)))
    (delete-file (buffer-file-name))
    (kill-this-buffer)))

(defun rename-this-file-and-buffer (new-name)
  "Renames both current buffer and file it's visiting to NEW-NAME."
  (interactive "sNew name: ")
  (let ((name (buffer-name))
        (filename (buffer-file-name)))
    (unless filename
      (error "Buffer '%s' is not visiting a file!" name))
    (progn
      (when (file-exists-p filename)
        (rename-file filename new-name 1))
      (set-visited-file-name new-name)
      (rename-buffer new-name))))
#+end_src

** Nicer org-return

#+begin_src emacs-lisp
(defun unpackaged/org-element-descendant-of (type element)
  "Return non-nil if ELEMENT is a descendant of TYPE.
TYPE should be an element type, like `item' or `paragraph'.
ELEMENT should be a list like that returned by `org-element-context'."
  ;; MAYBE: Use `org-element-lineage'.
  (when-let* ((parent (org-element-property :parent element)))
    (or (eq type (car parent))
        (unpackaged/org-element-descendant-of type parent))))

;;;###autoload
(defun unpackaged/org-return-dwim (&optional default)
  "A helpful replacement for `org-return-indent'.  With prefix, call `org-return-indent'.

On headings, move point to position after entry content.  In
lists, insert a new item or end the list, with checkbox if
appropriate.  In tables, insert a new row or end the table."
  ;; Inspired by John Kitchin: http://kitchingroup.cheme.cmu.edu/blog/2017/04/09/A-better-return-in-org-mode/
  (interactive "P")
  (if default
      (org-return t)
    (cond
     ((eq 'link (car (org-element-context)))
      ;; Link: Open it.
      (org-open-at-point-global))

     ((org-at-heading-p)
      ;; Heading: Move to position after entry content.
      ;; NOTE: This is probably the most interesting feature of this function.
      (let ((heading-start (org-entry-beginning-position)))
        (goto-char (org-entry-end-position))
        (cond ((and (org-at-heading-p)
                    (= heading-start (org-entry-beginning-position)))
               ;; Entry ends on its heading; add newline after
               (end-of-line)
               (insert "\n\n"))
              (t
               ;; Entry ends after its heading; back up
               (forward-line -1)
               (end-of-line)
               (when (org-at-heading-p)
                 ;; At the same heading
                 (forward-line)
                 (insert "\n")
                 (forward-line -1))
               (while (not (looking-back "\\(?:[[:blank:]]?\n\\)\\{3\\}" nil))
                 (insert "\n"))
               (forward-line -1)))))

     ((org-at-item-checkbox-p)
      ;; Checkbox: Insert new item with checkbox.
      (org-insert-todo-heading nil))

     ((org-in-item-p)
      ;; Plain list.  Yes, this gets a little complicated...
      (let ((context (org-element-context)))
        (if (or (eq 'plain-list (car context))  ; First item in list
                (and (eq 'item (car context))
                     (not (eq (org-element-property :contents-begin context)
                              (org-element-property :contents-end context))))
                (unpackaged/org-element-descendant-of 'item context))  ; Element in list item, e.g. a link
            ;; Non-empty item: Add new item.
            (org-insert-item)
          ;; Empty item: Close the list.
          (delete-region (line-beginning-position) (line-end-position))
          (insert "\n"))))

     ((when (fboundp 'org-inlinetask-in-task-p)
        (org-inlinetask-in-task-p))
      ;; Inline task: Don't insert a new heading.
      (org-return t))

     ((org-at-table-p)
      (cond ((save-excursion
               (beginning-of-line)
               ;; See `org-table-next-field'.
               (cl-loop with end = (line-end-position)
                        for cell = (org-element-table-cell-parser)
                        always (equal (org-element-property :contents-begin cell)
                                      (org-element-property :contents-end cell))
                        while (re-search-forward "|" end t)))
             ;; Empty row: end the table.
             (delete-region (line-beginning-position) (line-end-position))
             (org-return t))
            (t
             ;; Non-empty row: call `org-return-indent'.
             (org-return t))))
     (t
      ;; All other cases: call `org-return-indent'.
	  (org-return t)))))


;; Newline Behavior
(setq ad-redefinition-action 'accept)

(defun tl/newline-at-end-of-line ()
  "Move to the end of the current line, insert a newline, and reindent."
  (interactive)
  (end-of-line)                    ; Move to the end of the current line
  (newline-and-indent))            ; Insert a newline and indent according to mode
#+end_src

** Expand-region

#+begin_src emacs-lisp
(use-package expand-region
  :ensure t)
#+end_src

** Symbol-overlay

#+begin_src emacs-lisp
(use-package symbol-overlay
  :hook ((prog-mode html-mode yaml-mode conf-mode) . symbol-overlay-mode)
  :delight symbol-overlay-mode
  :ensure t)
#+end_src

** Hungry-delete
[[https://github.com/nflath/hungry-delete][Hungry Delete]] is a minor-mode that causes deletion to delete all whitespace in the direction you are deleting. 

#+begin_src emacs-lisp
(use-package hungry-delete
  :ensure t
  :defer t
  :config (global-hungry-delete-mode))
#+end_src

** Multiple-cursors

#+begin_src emacs-lisp
(use-package multiple-cursors
  :bind ;; Mark one more occurrence
        (("C-x RET" . mc/mark-next-like-this)
		 ("C-x x A" . mc/mark-all-like-this)
		 ;; From active region to multiple cursors
         ("C-x x c" . mc/edit-lines)
		 ("C-x x a" . mc/edit-beginnings-of-lines)
		 ("C-x x e" . mc/edit-ends-of-lines)
         ("C-x x l" . mc/mark-all-in-region)
		 ("C-x x r" . set-rectangular-region-anchor)))
#+end_src

** Buffer-switching adjustment
Skip default buffers like **Messages** when using =buffer-prev=/=next=

#+begin_src emacs-lisp
(defun tl/better-next-buffer ()
  "Switch to the next buffer, skipping those with names starting with an asterisk."
  (interactive)
  (next-buffer)
  (while (string-prefix-p "*" (buffer-name (current-buffer)))
    (next-buffer)))

(defun tl/better-previous-buffer ()
  "Switch to the previous buffer, skipping those with names starting with an asterisk."
  (interactive)
  (previous-buffer)
  (while (string-prefix-p "*" (buffer-name (current-buffer)))
    (previous-buffer)))
#+end_src

** I-Search
Show number of matches while searching.

#+begin_src emacs-lisp
(use-package anzu
  :bind (([remap query-replace-regexp] . anzu-query-replace-regexp)
         ([remap query-replace] . anzu-query-replace)
         ("C-M-w". isearch-yank-symbol))
  :custom
  (anzu-mode-lighter "")
  :config
  (defun sanityinc/isearch-exit-other-end ()
    "Exit isearch, but at the other end of the search string.
This is useful when followed by an immediate kill."
    (interactive)
    (isearch-exit)
    (goto-char isearch-other-end))
  (define-key isearch-mode-map [(control return)] 'sanityinc/isearch-exit-other-end)
  ;; Search back/forth for the symbol at point
  ;; See http://www.emacswiki.org/emacs/SearchAtPoint
  (defun isearch-yank-symbol ()
    "*Put symbol at current point into search string."
    (interactive)
    (let ((sym (thing-at-point 'symbol)))
      (if sym
          (progn
            (setq isearch-regexp t
                  isearch-string (concat "\\_<" (regexp-quote sym) "\\_>")
                  isearch-message (mapconcat 'isearch-text-char-description isearch-string "")
                  isearch-yank-flag t))
        (ding)))
    (isearch-search-and-update)))
#+end_src

** Clipboard adjustments

#+begin_src emacs-lisp
(defun kill-region-or-backward-delete ()
  "Kill the region if active, otherwise delete backward."
  (interactive)
  (if (region-active-p)
      (progn
        (kill-ring-save (region-beginning) (region-end))
	    (let ((process-connection-type nil))
          (start-process "wl-copy" "*wl-copy*" "wl-copy" "-n")
          (process-send-string "wl-copy" (current-kill 0))
          (process-send-eof "wl-copy"))
	    (message "Copied to clipboard")
        (delete-region (region-beginning) (region-end)))
    (hungry-delete-backward 1)))

(defun kill-region-or-forward-delete ()
  "Kill the region if active, otherwise delete forward."
  (interactive)
  (if (region-active-p)
      (progn
        (kill-ring-save (region-beginning) (region-end))
	    (let ((process-connection-type nil))
          (start-process "wl-copy" "*wl-copy*" "wl-copy" "-n")
          (process-send-string "wl-copy" (current-kill 0))
          (process-send-eof "wl-copy"))
	    (message "Copied to clipboard")
        (delete-region (region-beginning) (region-end)))
    (hungry-delete-forward 1)))

;; Function to always copy to the system clipboard
(defun copy-to-system-clipboard ()
  (interactive)
  (if (region-active-p)
      (progn
        (kill-ring-save (region-beginning) (region-end))
        (let ((process-connection-type nil))
          (start-process "wl-copy" "*wl-copy*" "wl-copy" "-n")
          (process-send-string "wl-copy" (current-kill 0))
          (process-send-eof "wl-copy"))
        (message "Copied to clipboard"))
    (message "No active region")))

;; By default when you want to paste over the selected region, it doesn't replace it
;; I have bound pasting from system clipboard in terminal in zhs shell by using wl-clipboard on C-y in emacs-mode file
;; Don't bind pasting in terminal config cuz it will affect other TUI tools like emacs and the keys won't be modifiable
(defun paste-from-system-clipboard ()
  "Paste from system clipboard, either replacing the selected region or inserting at point."
  (interactive)
  (if (use-region-p)
      (progn
        (delete-region (region-beginning) (region-end))
        (insert (shell-command-to-string "wl-paste -n")))
    (insert (shell-command-to-string "wl-paste -n"))))

;(global-set-key (kbd "C-y") 'paste-from-system-clipboard)

;; Function to paste directly into a code block
(defun tl/org-paste-powershell-code-block ()
  "Insert an Org-mode source code block for PowerShell and paste clipboard content using wl-paste."
  (interactive)
  (let ((lang "example")
        (clipboard-content (shell-command-to-string "wl-paste -n")))
    (insert (format "#+begin_src %s\n" lang))
    (insert clipboard-content)
    (insert "\n#+end_src")
    (org-edit-src-code)))  ; Optional: Enter the src block for editing

;; Bind the function to a key, e.g., C-c p
(global-set-key (kbd "C-c b") 'tl/org-paste-powershell-code-block)

;; Function to copy last entry from kill-ring buffer to the system clipboard
(defun copy-last-entry-to-clipboard ()
  (interactive)
  (when kill-ring
    (with-temp-buffer
      (insert (car kill-ring))
      (call-process-region (point-min) (point-max) "wl-copy"))
    (message "Last entry copied to system clipboard.")))

(global-set-key (kbd "M-'") 'copy-last-entry-to-clipboard)
#+end_src

** Selection adjustments
Function =smarter-move-beginning-of-line= moves the cursor to the indentation of the beginning of the current line.
If the cursor is already at the indentation, it moves to the actual beginning of the line.
The function also accepts an argument =ARG= which, if non-nil or non-zero, moves the cursor forward =ARG= - 1 lines before executing the main logic.
This configuration also remaps =C-a= the =smarter-move-beginning-of-line= function using the =global-set-key= function.

#+begin_src emacs-lisp
(defun smarter-move-beginning-of-line (arg)
  "Move point back to indentation of beginning of line.
   Only bind this function when not in an Org mode buffer.
   When in Org mode buffers, maintain the normal behavior of
   `move-beginning-of-line'."
  (interactive "^p")
  (if (and (boundp 'org-mode) org-mode)
      (move-beginning-of-line arg)
    (setq arg (or arg 1))
    ;; Move lines first
    (when (/= arg 1)
      (let ((line-move-visual nil))
        (forward-line (1- arg))))
    (let ((orig-point (point)))
      (back-to-indentation)
      (when (= orig-point (point))
        (move-beginning-of-line 1)))))

(defun set-smarter-move-beginning-of-line-key ()
  "Set key binding for 'smarter-move-beginning-of-line' based on the buffer type."
  (global-set-key (kbd "C-a") 'smarter-move-beginning-of-line))

;; Set the key binding based on the buffer type
(add-hook 'org-mode-hook (lambda () (local-set-key (kbd "C-a") 'move-beginning-of-line)))
(add-hook 'after-change-major-mode-hook 'set-smarter-move-beginning-of-line-key)

;; Select until beginning of the buffer
(defun select-until-beginning ()
  "Select text from current point until the beginning of the buffer."
  (interactive)
  (push-mark (point) t t)
  (goto-char (point-min)))

;; Select until end of the buffer
(defun select-until-end ()
  "Select text from current point until the end of the buffer."
  (interactive)
  (push-mark (point) t t)
  (goto-char (point-max)))

;; By default there's no command to kill to beginning of line
(defun kill-to-beginning-of-line ()
  "Kill text from point to the beginning of the line."
  (interactive)
  (kill-line 0))
#+end_src

** Kill-whole-line adjustment

#+begin_src emacs-lisp
(defun tl/kill-copy-whole-line ()
  "Kill the current line and copy its content to the system clipboard using wl-copy."
  (interactive)
  (let ((line-text (buffer-substring-no-properties
                    (line-beginning-position)
                    (line-end-position))))
    (kill-whole-line)
    (with-temp-buffer
      (insert line-text)
      (when (= 0 (call-process-region (point-min) (point-max) "wl-copy"))
        (message "Line copied to clipboard.")))))
#+end_src

** Copy current line

#+begin_src emacs-lisp
(defun tl/copy-current-line ()
  "Copy the current line to the system clipboard using wl-copy and display a message."
  (interactive)
  (let ((line (buffer-substring-no-properties
               (line-beginning-position)
               (line-end-position))))
    (with-temp-buffer
      (insert line)
      (call-process-region (point-min) (point-max) "wl-copy")))
  (message "Line copied to clipboard."))
#+end_src

** Copy down command
Similar to =org-table-copy-down= but for normal emacs buffers.

#+begin_src emacs-lisp
(defun tl/copy-down-current-line-or-region ()
  "Copy the current line (or region) and insert it below the current line."
  (interactive)
    (let ((text-to-copy (if (region-active-p)
                            (buffer-substring (region-beginning) (region-end))
                          (buffer-substring (line-beginning-position) (line-end-position))))
          (insertion-point (if (region-active-p)
                             (region-end)
                           (line-end-position))))
      (goto-char insertion-point)
      (unless (region-active-p) (insert "\n"))
      (insert text-to-copy)
      (goto-char (+ insertion-point (length text-to-copy) (if (region-active-p) 0 1)))))
#+end_src

** Toggle selection mode
#+begin_src emacs-lisp
(defun toggle-mark-command ()
  "Toggle the mark using `set-mark-command'."
  (interactive)
  (if (region-active-p)
      (deactivate-mark)
    (set-mark-command nil)))
#+end_src

** Screenshot automation
Copy screenshot from clipboard history which is saved in =/tmp/screenshot.png=, prompt for filename, location of the screenshot and insert link to it at point.

#+begin_src emacs-lisp
(defun tl/org-insert-screenshot ()
  "Copy a screenshot from /tmp/screenshot.png to a specified directory with a timestamp as the filename, and insert an org-mode link to it at point."
  (interactive)
  (let* ((timestamp (format-time-string "%Y%m%d_%H%M%S"))
         (category (tl/read-char-visible "Category (p/n for project/notes): "))
         (category (if (char-equal category ?p) "project" "notes"))
         (save-path (if (string= category "project")
                        "~/documents/org/reports/screenshots/"
                      "~/documents/org/roam/screenshots/"))
         (full-path (expand-file-name (concat save-path timestamp ".png"))))
    (copy-file "/tmp/screenshot.png" full-path)
    (insert (format "[[%s]]" full-path))))

(defun tl/read-char-visible (prompt)
  "Read a single visible character from the minibuffer with PROMPT."
  (let ((char (read-char-exclusive prompt)))
    (message "%c" char)
    char))
#+end_src

** Pdf-links automation

#+begin_src emacs-lisp
(defun open-pdf (path)
  "open pdf: links in org mode using zathura"
  (save-window-excursion
    (let* ((split (split-string path ":"))
	       (cmd
		(cl-ecase (length split)
		  (1
		   (concat "zathura " path))
		  (2
		   (concat "zathura -P "
			   (cadr split)
			   " "
			   (car split))))))
      (async-shell-command cmd))))

(org-add-link-type "pdf" #'open-pdf)
#+end_src

** No-littering
I use the =no-littering= package to keep folders where I edit files and the emacs configuration folder clean.

#+begin_src emacs-lisp
;; Change the user-emacs-directory to keep unwanted things out of ~/config/emacs
(setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
      url-history-file (expand-file-name "url/history" user-emacs-directory))

(use-package no-littering
  :ensure t)
#+end_src

** Undo-tree
I like to have a view of undo changes but I don't wanna save the undo history lists files like =.keybinds-cheatsheet.org.~undo-tree~=.

#+begin_src emacs-lisp
;;(use-package undo-tree
;;  :config
;;  (global-undo-tree-mode))
#+end_src

** Rainbow-mode
Display the actual color as a background for any hex color value (ex. #ffffff). The code block below enables =rainbow-mode= in all programming modes (=prog-mode=) as well as =org-mode=, which is why rainbow works in this document.

#+begin_src emacs-lisp
(use-package rainbow-mode
  :diminish
  :hook org-mode prog-mode)
#+end_src

** Mark whole line

#+begin_src emacs-lisp
(defun mark-whole-line ()
  "Mark the whole line from start to end position, with the cursor at the beginning of the next line."
  (interactive)
  (let ((start (line-beginning-position))
        (end (line-end-position)))
    (goto-char start)              ; Move cursor to the start of the current line
    (push-mark start t t)          ; Set the mark at the beginning of the line, activate the region
    (goto-char (line-beginning-position 2)))) ; Move cursor to the beginning of the next line
#+end_src

** Org-cycle or org-shifttab

#+begin_src emacs-lisp
(defun tl/org-cycle-or-shift-tab ()
  (interactive)
  (if (org-at-heading-p)
      (org-cycle)
    (org-shifttab)))
#+end_src

** Mark till end/beginning of paragraph

#+begin_src emacs-lisp
(defun mark-to-beginning-of-paragraph ()
  (interactive)
  (if (region-active-p)
      (progn
        (backward-paragraph)
        (goto-char (region-end))) ;Move the *beginning* of the mark
    (let ((end (point)))
      (backward-paragraph)
      (let ((start (point)))
        (set-mark end)
        (goto-char start)))))

(defun mark-to-end-of-paragraph ()
  (interactive)
  (if (region-active-p)
      (progn
        (forward-paragraph)
        (set-mark (region-beginning))) ; Move the *end* of the mark
    (let ((start (point)))
      (forward-paragraph)
      (let ((end (point)))
        (set-mark start)
        (goto-char end)))))
#+end_src

** Rainbow-delimeters
Adding rainbow coloring to parentheses.

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook ((emacs-lisp-mode . rainbow-delimiters-mode)
         (clojure-mode . rainbow-delimiters-mode)))
#+end_src

** Electric-pair-mode

#+begin_src emacs-lisp
;; The following prevents <> from auto-pairing when electric-pair-mode is on.
;; Otherwise, org-tempo is broken when you try to <s TAB...
(add-hook 'org-mode-hook (lambda ()
           (setq-local electric-pair-inhibit-predicate
                   `(lambda (c)
                  (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
#+end_src

** Buffer-move
[[https://www.emacswiki.org/emacs/buffer-move.el][Buffer-move]] functions allow easily moving windows around.

#+begin_src emacs-lisp
(require 'windmove)

;;;###autoload
(defun buf-move-prev ()
  "Swap the current buffer with the buffer in the previous window."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'left))
         (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No window on the left")
      (set-window-buffer (selected-window) (window-buffer other-win))
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-next ()
  "Swap the current buffer with the buffer in the next window."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'right))
         (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No window on the right")
      (set-window-buffer (selected-window) (window-buffer other-win))
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))
#+end_src

** Maximize-window-split
Function for toggling maximization of window split.

#+begin_src emacs-lisp
(defvar previous-window-config nil
  "Variable to store the previous window configuration.")

(defun toggle-window-maximize ()
  "Toggle maximization of the current split window."
  (interactive)
  (if (and previous-window-config (eq (window-configuration-p previous-window-config) t))
      (progn
        (set-window-configuration previous-window-config)
        (setq previous-window-config nil))
    (setq previous-window-config (current-window-configuration))
    (delete-other-windows)))
#+end_src

* Completion Framework
** Vertico
Vertico provides minibuffer completions which doesn’t include any of the other cruft that comes along with the more heavy-weight third party options. One important feature is that it plugs in directly to Emacs’ own completion engine unlike Helm and Ivy which have their own layer on top. This enables all existing completion commands in Emacs to use Vertico’s UI with no extra configuration.

The following configuration will add a few improvements: 
- Additional key bindings for users that like Vim-style movement keys
- Saving completion history, Vertico will sort items based on history!
- Adding extra metadata for completions in the margins using Marginalia
  
#+begin_src emacs-lisp
(use-package vertico
  :ensure t
  :bind (:map vertico-map
         ("C-n" . vertico-next)
         ("C-p" . vertico-previous)
         ("C-f" . vertico-exit))
  :init
  (vertico-mode)
  (savehist-mode))

(setq history-length 25)
#+end_src

** Orderless

#+begin_src emacs-lisp
(use-package orderless
  :ensure t
  :config
  (setq completion-styles '(orderless basic)
		read-buffer-completion-ignore-case t
		completion-category-defaults nil
		completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** Marginalia
Marginalia is nice, but the file metadata annotations are a little too plain.
Specifically, I have these gripes:
- File attributes would be nicer if coloured
- I don’t care about the user/group information if the user/group is me
- When a file time is recent, a relative age (e.g. 2h ago) is more useful than the date
- An indication of file fatness would be nice

Thanks to the =marginalia-annotator-registry=, we don’t have to advise, we can just add a new =file= annotator.
Another small thing is the face used for docstrings. At the moment it’s (italic shadow), but I don’t like that. 

#+begin_src emacs-lisp
(use-package marginalia
  :after vertico
  :ensure t
  :custom
  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  :init
  (marginalia-mode)

  (setq marginalia-censor-variables nil)

  (defun +marginalia--annotate-local-file-colorful (cand)
    "Just a more colourful version of `marginalia--annotate-local-file'."
    (when-let* ((attrs (file-attributes (substitute-in-file-name
                                        (marginalia--full-candidate cand)))))
      (marginalia--fields
       ((marginalia--file-owner attrs)
        :width 12 :face 'marginalia-file-owner)
       ((marginalia--file-modes attrs))
       ((+marginalia-file-size-colorful (file-attribute-size attrs))
        :width 7)
       ((+marginalia--time-colorful (file-attribute-modification-time attrs))
        :width 12))))

  (defun +marginalia--time-colorful (time)
    (let* ((seconds (float-time (time-subtract (current-time) time)))
           (color (doom-blend
                   (face-attribute 'marginalia-date :foreground nil t)
                   (face-attribute 'marginalia-documentation :foreground nil t)
                   (/ 1.0 (log (+ 3 (/ (+ 1 seconds) 345600.0)))))))
      ;; 1 - log(3 + 1/(days + 1)) % grey
      (propertize (marginalia--time time) 'face (list :foreground color))))

  (defun +marginalia-file-size-colorful (size)
    (let* ((size-index (/ (log10 (+ 1 size)) 7.0))
           (color (if (< size-index 10000000) ; 10m
                      (doom-blend 'orange 'green size-index)
                    (doom-blend 'red 'orange (- size-index 1)))))
      (propertize (file-size-human-readable size) 'face (list :foreground color))))

  (add-function :override (symbol-function 'marginalia--annotate-local-file)
                #'+marginalia--annotate-local-file-colorful)
)
#+end_src

** Consult

#+begin_src emacs-lisp
(use-package consult
  :ensure t
  :config)
#+end_src

** Embark
[[https://github.com/oantolin/embark][Embark]] is a emacs mini-buffer actions Rooted in keymaps.

#+begin_src emacs-lisp
(use-package embark
  :ensure t
  :bind
  ;(("C-." . embark-act)         ;; pick some comfortable binding
  ; ("C-;" . embark-dwim)        ;; good alternative: M-.
  ; ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
  :init
  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)
  ;; Show the Embark target at point via Eldoc.  You may adjust the Eldoc
  ;; strategy, if you want to see the documentation from multiple providers.
  (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
  ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)
  :config
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))
#+end_src

** Embark-consult

#+begin_src emacs-lisp
;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :ensure t ; only need to install it, embark loads it after consult if found
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

* Other Packages
** Jinx

#+begin_src emacs-lisp
(use-package jinx
  :ensure t
  :hook (emacs-startup . global-jinx-mode)
  :config
  (setq jinx-languages "en_US,pl_PL"))

;; Switch between the en_US and pl_PL dictionaries
(defun tl/jinx-toggle-single-dictionary ()
  (interactive)
  (if (string= jinx-languages "en_US")
      (progn
        (setq jinx-languages "pl_PL")
        (message "Spell checker dictionary set to: pl_PL"))
    (progn
      (setq jinx-languages "en_US")
      (message "Spell checker dictionary set to: en_US")))
    (jinx-mode 0)
      (jinx-mode 1))
#+end_src

** Treemacs
 
#+begin_src emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay        0.5
          treemacs-directory-name-transformer      #'identity
          treemacs-display-in-side-window          t
          treemacs-eldoc-display                   'simple
          treemacs-file-event-delay                2000
          treemacs-file-extension-regex            treemacs-last-period-regex-value
          treemacs-file-follow-delay               0.2
          treemacs-file-name-transformer           #'identity
          treemacs-follow-after-init               t
          treemacs-expand-after-init               t
          treemacs-find-workspace-method           'find-for-file-or-pick-first
          treemacs-git-command-pipe                ""
          treemacs-goto-tag-strategy               'refetch-index
          treemacs-header-scroll-indicators        '(nil . "^^^^^^")
          treemacs-hide-dot-git-directory          t
          treemacs-indentation                     2
          treemacs-indentation-string              " "
          treemacs-is-never-other-window           nil
          treemacs-max-git-entries                 5000
          treemacs-missing-project-action          'ask
          treemacs-move-forward-on-expand          nil
          treemacs-no-png-images                   nil
          treemacs-no-delete-other-windows         t
          treemacs-project-follow-cleanup          nil
          treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                        'left
          treemacs-read-string-input               'from-child-frame
          treemacs-recenter-distance               0.1
          treemacs-recenter-after-file-follow      nil
          treemacs-recenter-after-tag-follow       nil
          treemacs-recenter-after-project-jump     'always
          treemacs-recenter-after-project-expand   'on-distance
          treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
          treemacs-project-follow-into-home        nil
          treemacs-show-cursor                     nil
          treemacs-show-hidden-files               t
          treemacs-silent-filewatch                nil
          treemacs-silent-refresh                  nil
          treemacs-sorting                         'alphabetic-asc
          treemacs-select-when-already-in-treemacs 'move-back
          treemacs-space-between-root-nodes        t
          treemacs-tag-follow-cleanup              t
          treemacs-tag-follow-delay                1.5
          treemacs-text-scale                      nil
          treemacs-user-mode-line-format           nil
          treemacs-user-header-line-format         nil
          treemacs-wide-toggle-width               70
          treemacs-width                           35
          treemacs-width-increment                 1
          treemacs-width-is-initially-locked       t
          treemacs-workspace-switch-cleanup        nil)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode 'always)
    (when treemacs-python-executable
      (treemacs-git-commit-diff-mode t))

    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple)))

    (treemacs-hide-gitignored-files-mode nil)))


;; Treemacs global keybinds
;(global-set-key (kbd "C-c C-w s") 'treemacs-switch-workspace)
;(global-set-key (kbd "C-c C-w r") 'treemacs-rename-workspace)
;(global-set-key (kbd "C-c C-w a") 'treemacs-create-workspace)
;(global-set-key (kbd "C-c C-w d") 'treemacs-remove-workspace)
;(global-set-key (kbd "C-c C-w e") 'treemacs-edit-workspaces)
;(global-set-key (kbd "C-c C-w n") 'treemacs-next-workspace)
;(global-set-key (kbd "C-c C-w f") 'treemacs-set-fallback-workspace)
;(global-set-key (kbd "C-c C-p a") 'treemacs-add-project-to-workspace)
;(global-set-key (kbd "C-c C-p p") 'treemacs-projectile)
;(global-set-key (kbd "C-c C-p d") 'treemacs-remove-project-from-workspace)
;(global-set-key (kbd "C-c C-p r") 'treemacs-rename-project)
;(global-set-key (kbd "C-c C-p c c") 'treemacs-collapse-project)
;(global-set-key (kbd "C-c C-p c o") 'treemacs-collapse-all-projects)
;(global-set-key (kbd "S-TAB") 'treemacs-collapse-all-projects)
(global-set-key (kbd "M-I") 'treemacs)
;(global-set-key (kbd "C-c C-w b") 'treemacs-bookmark)
;(global-set-key (kbd "C-c C-w C-f") 'treemacs-find-file)
;(global-set-key (kbd "C-c C-w C-t") 'treemacs-find-tag)
;(global-set-key (kbd "C-c C-w w") 'treemacs-select-window)
;(global-set-key (kbd "C-c C-w C-d") 'treemacs-select-directory)
;(global-set-key (kbd "C-c C-w 1") 'treemacs-delete-other-windows)
;(global-set-key (kbd "C-c C-w C-h") 'treemacs-show-changelog)
;(global-set-key (kbd "C-c C-w t") 'treemacs-load-theme)
;(global-set-key (kbd "C-c C-w i") 'treemacs-icon-catalogue)
;(global-set-key (kbd "C-c C-w n") 'treemacs-narrow-to-current-file)
;(global-set-key (kbd "C-c C-w p") 'treemacs-create-workspace-from-project)
;(global-set-key (kbd "C-c C-p P") 'treemacs-projectile)
;(global-set-key (kbd "C-c C-p C-a") 'treemacs-add-and-display-current-project)
;(global-set-key (kbd "C-c C-p C-e") 'treemacs-add-and-display-current-project-exclusively)
;(global-set-key (kbd "C-c C-w C-s") 'treemacs-select-scope-type)

;; Treemacs-mode keybinds
(with-eval-after-load 'treemacs
  ;; General Keybinds
  (define-key treemacs-mode-map (kbd "?") 'treemacs-common-helpful-hydra)
  (define-key treemacs-mode-map (kbd "j") 'treemacs-next-line)
  (define-key treemacs-mode-map (kbd "k") 'treemacs-previous-line)
  (define-key treemacs-mode-map (kbd "h") 'treemacs-root-up)
  (define-key treemacs-mode-map (kbd "l") 'treemacs-root-down)
  (define-key treemacs-mode-map (kbd "u") 'treemacs-goto-parent-node)
  ;(define-key treemacs-mode-map (kbd "H") 'treemacs-collapse-parent-node)
  (define-key treemacs-mode-map (kbd "M-j") 'treemacs-next-neighbour)
  (define-key treemacs-mode-map (kbd "M-k") 'treemacs-previous-neighbour)
  (define-key treemacs-mode-map (kbd "M-p") 'treemacs-move-project-up)
  (define-key treemacs-mode-map (kbd "M-n") 'treemacs-move-project-down)
  (define-key treemacs-mode-map (kbd "RET") 'treemacs-RET-action)
  (define-key treemacs-mode-map (kbd "TAB") 'treemacs-TAB-action)
  (define-key treemacs-mode-map (kbd "w") 'treemacs-set-width)
  (define-key treemacs-mode-map (kbd "=") 'treemacs-fit-window-width)
  (define-key treemacs-mode-map (kbd "W") 'treemacs-extra-wide-toggle)
  (define-key treemacs-mode-map (kbd "<") 'treemacs-decrease-width)
  (define-key treemacs-mode-map (kbd ">") 'treemacs-increase-width)
  (define-key treemacs-mode-map (kbd "g") 'treemacs-refresh)
  (define-key treemacs-mode-map (kbd "d") 'treemacs-delete-file)
  (define-key treemacs-mode-map (kbd "r") 'treemacs-rename-file)
  (define-key treemacs-mode-map (kbd "m") 'treemacs-move-file)
  (define-key treemacs-mode-map (kbd "cf") 'treemacs-create-file)
  (define-key treemacs-mode-map (kbd "cd") 'treemacs-create-dir)
  (define-key treemacs-mode-map (kbd "q") 'treemacs-quit)
  (define-key treemacs-mode-map (kbd "Q") 'treemacs-kill-buffer)
  (define-key treemacs-mode-map (kbd "P") 'treemacs-peek-mode)
  (define-key treemacs-mode-map (kbd "s") 'treemacs-resort)
  (define-key treemacs-mode-map (kbd "b") 'treemacs-add-bookmark)
  (define-key treemacs-mode-map (kbd "\\!") 'treemacs-run-shell-command-for-current-node)
  (define-key treemacs-mode-map (kbd "M-!") 'treemacs-run-shell-command-in-project-root)
  (define-key treemacs-mode-map (kbd "C") 'treemacs-cleanup-litter)
  (define-key treemacs-mode-map (kbd "RET") 'treemacs-visit-node-no-split)

  ;; Copy Keybinds
  (define-key treemacs-mode-map (kbd "ya") 'treemacs-copy-absolute-path-at-point)
  (define-key treemacs-mode-map (kbd "yr") 'treemacs-copy-relative-path-at-point)
  (define-key treemacs-mode-map (kbd "yp") 'treemacs-copy-project-path-at-point)
  (define-key treemacs-mode-map (kbd "yf") 'treemacs-copy-file)

  ;; Toggle Keybinds
  (define-key treemacs-mode-map (kbd "th") 'treemacs-toggle-show-dotfiles)
  (define-key treemacs-mode-map (kbd "ti") 'treemacs-hide-gitignored-files-mode)
  (define-key treemacs-mode-map (kbd "tw") 'treemacs-toggle-fixed-width)
  (define-key treemacs-mode-map (kbd "tf") 'treemacs-follow-mode)
  (define-key treemacs-mode-map (kbd "ta") 'treemacs-filewatch-mode)
  (define-key treemacs-mode-map (kbd "tv") 'treemacs-fringe-indicator-mode)
  (define-key treemacs-mode-map (kbd "td") 'treemacs-git-commit-diff-mode)

  ;; Project Keybinds
  (define-key treemacs-mode-map (kbd "C-c C-p a") 'treemacs-add-project-to-workspace)
  (define-key treemacs-mode-map (kbd "C-c C-p p") 'treemacs-projectile)
  (define-key treemacs-mode-map (kbd "C-c C-p d") 'treemacs-remove-project-from-workspace)
  (define-key treemacs-mode-map (kbd "C-c C-p r") 'treemacs-rename-project)
  (define-key treemacs-mode-map (kbd "C-c C-p c c") 'treemacs-collapse-project)
  (define-key treemacs-mode-map (kbd "C-c C-p c o") 'treemacs-collapse-all-projects)
  (define-key treemacs-mode-map (kbd "S-TAB") 'treemacs-collapse-all-projects))

;(use-package treemacs-projectile
;  :after (treemacs projectile)
;  :ensure t)

(use-package treemacs-icons-dired
  :hook (dired-mode . treemacs-icons-dired-enable-once)
  :ensure t)
#+end_src

** Dired
=Dired= aka _directory editor_ is a built-in file management mode in emacs.

#+begin_src emacs-lisp
(use-package dired-open
  :config
  (setq dired-open-extensions '(("gif" . "swayimg")
                                ("jpg" . "swayimg")
                                ("png" . "swayimg")
                                ("mkv" . "mpv")
                                ("mp4" . "mpv")
                                ("pdf" . "zathura"))))

(use-package dired-ranger
  :ensure t)
(use-package peep-dired
  :after dired)

;; Dired config
(setq dired-listing-switches "-agho --group-directories-first"
      dired-omit-files "^\\.[^.].*"
      dired-omit-verbose nil
      dired-hide-details-hide-symlink-targets nil
      delete-by-moving-to-trash t)

(autoload 'dired-omit-mode "dired-x")

(defun tl-dired-mode-setup ()
  ;; Navigation
  (define-key dired-mode-map (kbd "h") 'dired-up-directory)
  (define-key dired-mode-map (kbd "j") 'peep-dired-next-file)
  (define-key dired-mode-map (kbd "k") 'peep-dired-prev-file)
  (define-key dired-mode-map (kbd "l") 'dired-open-file)
  ;; File Operations
  (define-key dired-mode-map (kbd "y") 'dired-ranger-copy)
  (define-key dired-mode-map (kbd "m") 'dired-ranger-move)
  (define-key dired-mode-map (kbd "p") 'dired-ranger-paste)
  (define-key dired-mode-map (kbd "n") 'dired-create-directory)
  (define-key dired-mode-map (kbd "N") 'dired-create-empty-file)
  (define-key dired-mode-map (kbd "f") 'dired-goto-file)
  ;; Misc
  (define-key dired-mode-map (kbd "SPC") 'dired-mark)
  (define-key dired-mode-map (kbd "H") 'dired-omit-mode)
  ;; Other
  ;(define-key dired-mode-map (kbd "l") 'dired-single-buffer)
  ;(define-key dired-mode-map (kbd "h") 'dired-single-up-directory)
  ;(define-key dired-mode-map (kbd "k") 'previous-line)
  ;(define-key dired-mode-map (kbd "j") 'next-line)
  ;; Unbinding the keybinds I don't use
  (define-key dired-mode-map (kbd "o") 'nil)
  (define-key dired-mode-map (kbd "a") 'nil)
  (define-key dired-mode-map (kbd "c") 'nil)
  (define-key dired-mode-map (kbd "S") 'nil)
  (define-key dired-mode-map (kbd "!") 'nil)
  (define-key dired-mode-map (kbd "M") 'nil)
  (define-key dired-mode-map (kbd "O") 'nil)
  (define-key dired-mode-map (kbd "Z") 'nil)
  (define-key dired-mode-map (kbd "i") 'nil)
  (define-key dired-mode-map (kbd "W") 'nil)
  (define-key dired-mode-map (kbd "e") 'nil)
  (define-key dired-mode-map (kbd "T") 'nil)
  (define-key dired-mode-map (kbd "Y") 'nil)
  (define-key dired-mode-map (kbd "I") 'nil)
  (define-key dired-mode-map (kbd "P") 'nil)
  (define-key dired-mode-map (kbd "a") 'nil)
  (define-key dired-mode-map (kbd "A") 'nil)
  (define-key dired-mode-map (kbd "G") 'nil)
  (define-key dired-mode-map (kbd "L") 'nil)
  (define-key dired-mode-map (kbd "X") 'nil)
  (define-key dired-mode-map (kbd "v") 'nil)
  (define-key dired-mode-map (kbd "V") 'nil)
  (define-key dired-mode-map (kbd "B") 'nil)
  (define-key dired-mode-map (kbd ".") 'nil)
  (define-key dired-mode-map (kbd "<") 'nil)
  (define-key dired-mode-map (kbd ">") 'nil)
  (define-key dired-mode-map (kbd "?") 'nil)
  (define-key dired-mode-map (kbd "^") 'nil)
  (define-key dired-mode-map (kbd "+") 'nil)
  (define-key dired-mode-map (kbd "Q") 'nil)
  (define-key dired-mode-map (kbd "s") 'nil))

(add-hook 'dired-mode-hook 'tl-dired-mode-setup)

(use-package dired-rainbow
  :after dired
  :config
  (dired-rainbow-define-chmod directory "#6cb2eb" "d.*")
  (dired-rainbow-define html "#eb5286" ("css" "less" "sass" "scss" "htm" "html" "jhtm" "mht" "eml" "mustache" "xhtml"))
  (dired-rainbow-define xml "#f2d024" ("xml" "xsd" "xsl" "xslt" "wsdl" "bib" "json" "msg" "pgn" "rss" "yaml" "yml" "rdata"))
  (dired-rainbow-define document "#9561e2" ("docm" "doc" "docx" "odb" "odt" "pdb" "pdf" "ps" "rtf" "djvu" "epub" "odp" "ppt" "pptx"))
  (dired-rainbow-define markdown "#ffed4a" ("org" "etx" "info" "markdown" "md" "mkd" "nfo" "pod" "rst" "tex" "textfile" "txt"))
  (dired-rainbow-define database "#6574cd" ("xlsx" "xls" "csv" "accdb" "db" "mdb" "sqlite" "nc"))
  (dired-rainbow-define media "#de751f" ("mp3" "mp4" "mkv" "MP3" "MP4" "avi" "mpeg" "mpg" "flv" "ogg" "mov" "mid" "midi" "wav" "aiff" "flac"))
  (dired-rainbow-define image "#f66d9b" ("tiff" "tif" "cdr" "gif" "ico" "jpeg" "jpg" "png" "psd" "eps" "svg"))
  (dired-rainbow-define log "#c17d11" ("log"))
  (dired-rainbow-define shell "#f6993f" ("awk" "bash" "bat" "sed" "sh" "zsh" "vim"))
  (dired-rainbow-define interpreted "#38c172" ("py" "ipynb" "rb" "pl" "t" "msql" "mysql" "pgsql" "sql" "r" "clj" "cljs" "scala" "js"))
  (dired-rainbow-define compiled "#4dc0b5" ("asm" "cl" "lisp" "el" "c" "h" "c++" "h++" "hpp" "hxx" "m" "cc" "cs" "cp" "cpp" "go" "f" "for" "ftn" "f90" "f95" "f03" "f08" "s" "rs" "hi" "hs" "pyc" ".java"))
  (dired-rainbow-define executable "#8cc4ff" ("exe" "msi"))
  (dired-rainbow-define compressed "#51d88a" ("7z" "zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
  (dired-rainbow-define packaged "#faad63" ("deb" "rpm" "apk" "jad" "jar" "cab" "pak" "pk3" "vdf" "vpk" "bsp"))
  (dired-rainbow-define encrypted "#ffed4a" ("gpg" "pgp" "asc" "bfe" "enc" "signature" "sig" "p12" "pem"))
  (dired-rainbow-define fonts "#6cb2eb" ("afm" "fon" "fnt" "pfb" "pfm" "ttf" "otf"))
  (dired-rainbow-define partition "#e3342f" ("dmg" "iso" "bin" "nrg" "qcow" "toast" "vcd" "vmdk" "bak"))
  (dired-rainbow-define vc "#0074d9" ("git" "gitignore" "gitattributes" "gitmodules"))
  (dired-rainbow-define-chmod executable-unix "#38c172" "-.*x.*"))

;(defun tl/dired-link (path)
;  (let ((target path))
;    (lambda () (interactive) (message "Path: %s" target) (dired path))))

;  (tl/leader-keys
;    ;; Dired bookmarks
;    "d H"  `(,(tl/dired-link "~") :wk "Home")
;    "d R"  `(,(tl/dired-link "~/documents/org/roam") :wk "Org Roam")
;    "d D"  `(,(tl/dired-link "~/downloads") :wk "Downloads")
;    "d P"  `(,(tl/dired-link "~/pictures") :wk "Pictures")
;    "d V"  `(,(tl/dired-link "~/videos") :wk "Videos")
;    "d C"  `(,(tl/dired-link "~/.config") :wk ".config"))
#+end_src

** GPTel
Transient newer verion for gptel to work.
#+begin_src emacs-lisp
(use-package transient
  :ensure t)
#+end_src

Auto-scroll, automatically to end of response and set =org-mode= as default mode for =gptel= command.
#+begin_src emacs-lisp
(use-package gptel
  :ensure t
  :config
  (add-hook 'gptel-post-stream-hook 'gptel-auto-scroll)
  (add-hook 'gptel-post-response-functions 'gptel-end-of-response)
  (setq gptel-default-mode 'org-mode)
  ;(setf (alist-get 'org-mode gptel-prompt-prefix-alist) "**** ")

  ;; Set as the default gptel backend to OpenRouter
  (setq gptel-model   'google/gemini-2.0-pro-exp-02-05:free
       gptel-backend
       (gptel-make-openai "OpenRouter"               ; Any name you want
         :host "openrouter.ai"
         :endpoint "/api/v1/chat/completions"
         :stream t
         :key ""        ; Can be a function that returns the key
         :models '(google/gemini-2.0-pro-exp-02-05:free)))

  ;; GPTel directives - more prompts:
  ;; https://github.com/f/awesome-chatgpt-prompts 
  ;; https://github.com/danielmiessler/fabric/tree/main/patterns
  ;; Check out the find prompt script https://github.com/f/awesome-chatgpt-prompts/blob/main/scripts/find-prompt
  (setq gptel-directives
      `((default . "To assist:  Be terse.  Do not offer unprompted advice or clarifications. Speak directly and be willing to make creative guesses. Explain your reasoning. Be willing to reference less reputable sources for ideas. Never apologize.  Ask questions when unsure.")
          (programmer . "You are a careful programmer.  Provide code and only code as output without any additional text, prompt or note.")
          (cliwhiz . "You are a command line helper.  Generate command line commands that do what is requested, without any additional description or explanation.  Generate ONLY the command, I will edit it myself before running.")
          (emacser . "You are an Emacs maven.  Reply only with the most appropriate built-in Emacs command for the task I specify.  Do NOT generate any additional description or explanation.")
          (explain . "Explain what this code does to a novice programmer.")
  	      (noter . "I want you to act as a note-taking assistant for a lecture. Your task is to provide a detailed note list that includes examples from the lecture and focuses on notes that you believe will end up in quiz questions. Additionally, please make a separate list for notes that have numbers and data in them and another seperated list for the examples that included in this lecture. The notes should be concise and easy to read.")
  	      (translator . "I want you to act as an English translator, spelling corrector and improver. I will speak to you in any language and you will detect the language, translate it and answer in the corrected and improved version of my text, in English. I want you to replace my simplified A0-level words and sentences with more beautiful and elegant, upper level English words and sentences. Keep the meaning same, but make them more literary. I want you to only reply the correction, the improvements and nothing else, do not write explanations. My first sentence is 'istanbulu cok seviyom burada olmak cok guzel'")
  	      (eng_teacher . "I want you to act as a spoken English teacher and improver. I will speak to you in English and you will reply to me in English to practice my spoken English. I want you to keep your reply neat, limiting the reply to 100 words. I want you to strictly correct my grammar mistakes, typos, and factual errors. I want you to ask me a question in your reply. Now let's start practicing, you could ask me a question first. Remember, I want you to strictly correct my grammar mistakes, typos, and factual errors.")
          (interviewer . "I want you to act as an interviewer. I will be the candidate and you will ask me the interview questions for the position position. I want you to only reply as the interviewer. Do not write all the conservation at once. I want you to only do the interview with me. Ask me the questions and wait for my answers. Do not write explanations. Ask me the questions one by one like an interviewer does and wait for my answers. My first sentence is 'Hi'")
          (character . "I want you to act like {character} from {series}. I want you to respond and answer like {character} using the tone, manner and vocabulary {character} would use. Do not write any explanations. Only answer like {character}. You must know all of the knowledge of {character}. My first sentence is 'Hi {character}.'")
          (cybersec_specialist . "I want you to act as a cyber security specialist. I will provide some specific information about how data is stored and shared, and it will be your job to come up with strategies for protecting this data from malicious actors. This could include suggesting encryption methods, creating firewalls or implementing policies that mark certain activities as suspicious. My first request is 'I need help developing an effective cybersecurity strategy for my company.'")
          (prompt_enhancer . "Act as a Prompt Enhancer AI that takes user-input prompts and transforms them into more engaging, detailed, and thought-provoking questions. Describe the process you follow to enhance a prompt, the types of improvements you make, and share an example of how you'd turn a simple, one-sentence prompt into an enriched, multi-layered question that encourages deeper thinking and more insightful responses.")
          (journalist . "I want you to act as a journalist. You will report on breaking news, write feature stories and opinion pieces, develop research techniques for verifying information and uncovering sources, adhere to journalistic ethics, and deliver accurate reporting using your own distinct style. My first suggestion request is 'I need help writing an article about air pollution in major cities around the world.'")
          ,@(let ((res))
              (pcase-dolist (`(,sym ,filename)
                             '((improve_prompt "improve_prompt.md")
                               (create_command "create_command.md")
                               (extract_poc "extract_poc.md")
                               (extract_wisdom "extract_wisdom.md")
                               (clean_text "clean_text.md")
                               (analyze_threat_report "analyze_threat_report.md")
                               (analyze_malware "analyze_malware.md")
                               (analyze_incident "analyze_incident.md")
                               (create_summary "create_summary.md")
                               (explain_code "explain_code.md")
                               (extract_book_recommendations "extract_book_recommendations.md")
                               (extract_videoid "extract_videoid.md"))
                               ;; I RAN OUT OF KEY PLACEHOLDERS
                               ;(summarize_newsletter "summarize_newsletter.md")
                               ;(write_micro_essay "write_micro_essay.md")
                               ;(summarize_git_changes "summarize_git_changes.md")
                               ;(improve_academic_writing "improve_academic_writing.md")
                               ;(rate_content "rate_content.md")
                               ;(get_youtube_rss "get_youtube_rss.md"))
                             res)
                (when-let* ((big-prompt (locate-user-emacs-file filename))
                            (_ (file-exists-p big-prompt)))
  				(push
  				 `(,sym . ,(with-temp-buffer
  							 (insert-file-contents big-prompt)
  							 (goto-char (point-min))
  							 (when (search-forward-regexp "^#" nil t)
                                 (goto-char (match-beginning 0)))
  							 (buffer-substring-no-properties (point) (point-max))))
  				 res)))
              res)))
  (setq-default gptel--system-message (alist-get 'default gptel-directives))
  
  ;; use M-x eval-last-sexp on it to check the user emacs directory where the .md files should be located
  ;(message user-emacs-directory)

  ;; Keyboard macros to invoke specific options from =gptel-menu= and normal keybinds.
  ;; FIRST SETUP: open 'gptel-menu' and press 'm' and 'e', then press 'C-xC-s' to save the option, then you can use 'C-M-a' keybid for the default option
  ;; I do not use 'gptel-menu' because I set every keybind to each option

  ;; Function to run gptel-send with the default options in gptel-menu
  (defun gptel-send-with-options (&optional arg)
    "Send query.  With prefix ARG open gptel's menu instead."
    (interactive "P")
    (if arg
        (call-interactively 'gptel-menu)
      (gptel--suffix-send (transient-args 'gptel-menu))))
  
  ;; Prompt menus
  (define-key global-map (kbd "C-x g") 'gptel-menu)
  (define-key global-map (kbd "C-x G") 'gptel-rewrite)
  (global-set-key (kbd "C-x C-v") 'gptel)
  (global-set-key (kbd "M-\\") 'gptel-abort)

  ;; Doesn't work
  ;(keymap-global-set "C-M-k" "C-x g m y RET")               ;; prompt from kill ring
  ;(keymap-global-set "C-M-d" "C-x g e i RET")               ;; respond in place
  ;(keymap-global-set "C-M-q" "C-x g m RET")                 ;; to echo area (I preferably use gptel command)
  ;(keymap-global-set "C-M-v" "C-x g e g RET RET")           ;; send to gpt session
  ;(keymap-global-set "C-M-l" "C-x g k RET")                 ;; response to kill ring (use 'M-'' to copy it to system clipboard)
  
  ;; Rewrite (applies to all rewrites)
  (global-set-key (kbd "C-M-r") 'gptel--suffix-rewrite)
  (global-set-key (kbd "C-x E") 'gptel--rewrite-directive-menu)      ;; Select directive for rewrite
  (global-set-key (kbd "C-x n") 'gptel--rewrite-next)
  ;; TODO - change keybinds
  ;(global-set-key (kbd "C-x p") 'gptel--rewrite-previous)
  ;(keymap-global-set "C-x C-d" "C-x G D")      ; diff - C-c C-d at point
  ;(keymap-global-set "C-x f" "C-x G A")        ; accept - C-c C-a at point
  ;(keymap-global-set "C-x d" "C-x G K")        ; reject - C-c C-k at point
  ;(keymap-global-set "C-x m" "C-x G M")        ; merge - C-c RET at point
  
  ;; Other
  (global-set-key (kbd "C-x s") 'gptel-system-prompt)       ;; Select directive for system prompt
  (global-set-key (kbd "C-c t") 'gptel-org-set-topic)
  ;(global-set-key (kbd "C-c e") 'gptel--suffix-system-message)   ;; I don't use it
  (global-set-key (kbd "C-v r") 'gptel--mark-response)

  ;; Response options
  (global-set-key (kbd "C-x r") 'gptel--regenerate)
  (global-set-key (kbd "C-x f") 'gptel--next-variant)
  ;(global-set-key (kbd "C-x C-b") 'gptel--previous-variant)    ; keybind taken
)
#+end_src

** Drag-stuff

#+begin_src emacs-lisp
(use-package drag-stuff
  :init
  (drag-stuff-global-mode 1)
  (drag-stuff-define-keys))
#+end_src

** God-Mode

#+begin_src emacs-lisp
(use-package god-mode
  :init
  (god-mode)
  ;; TODO Commands to bind: indent-region
  ;; Basic Keybinds
  (global-set-key (kbd "C-@") #'god-local-mode)                       ;; Prefix key
  (define-key god-local-mode-map (kbd "C-i") #'god-local-mode)        ;; Prefix key (only works in god-mode)
  (define-key god-local-mode-map (kbd "SPC") #'toggle-mark-command)   ;; Upgrading the mark command 'C-SPC'
  (define-key god-local-mode-map (kbd "C-z") #'repeat)
  (define-key god-local-mode-map (kbd "C-S-t") #'kmacro-start-macro-or-insert-counter)
  (define-key god-local-mode-map (kbd "C-S-y") #'kmacro-end-or-call-macro)
  (define-key god-local-mode-map (kbd "C-[") #'scroll-down-command)
  (define-key god-local-mode-map (kbd "C-]") #'scroll-up-command)
  (define-key god-local-mode-map (kbd "C-{") #'beginning-of-buffer)
  (define-key god-local-mode-map (kbd "C-}") #'end-of-buffer)
  (define-key god-local-mode-map (kbd "C-S-r") #'query-replace)
  (define-key god-local-mode-map (kbd "C-S-m") #'org-meta-return)
  (define-key god-local-mode-map (kbd "C-,") #'backward-paragraph)
  (define-key god-local-mode-map (kbd "C-.") #'forward-paragraph)
  (define-key god-local-mode-map (kbd "C->") #'mark-to-end-of-paragraph)
  (define-key god-local-mode-map (kbd "C-<") #'mark-to-beginning-of-paragraph)
  (define-key god-local-mode-map (kbd "C-e") #'org-end-of-line)
  (define-key god-local-mode-map (kbd "C-a") #'org-beginning-of-line)
  (define-key god-local-mode-map (kbd "C-S-e") #'org-end-of-line)
  (define-key god-local-mode-map (kbd "C-S-a") #'org-beginning-of-line)
  (define-key god-local-mode-map (kbd "C-w") #'copy-to-system-clipboard)
  (define-key god-local-mode-map (kbd "?") #'undo-redo)
  (define-key god-local-mode-map (kbd "C-y") #'paste-from-system-clipboard)
  (define-key god-local-mode-map (kbd "C-h") #'backward-char)
  (define-key god-local-mode-map (kbd "C-k") #'previous-line)
  (define-key god-local-mode-map (kbd "C-j") #'next-line)
  (define-key god-local-mode-map (kbd "C-l") #'forward-char)
  (define-key god-local-mode-map (kbd "C-S-l") #'forward-char)
  (define-key god-local-mode-map (kbd "C-S-h") #'backward-char)
  (define-key god-local-mode-map (kbd "C-f") #'forward-word)
  (define-key god-local-mode-map (kbd "C-b") #'backward-word)
  (define-key god-local-mode-map (kbd "C-S-f") #'forward-word)
  (define-key god-local-mode-map (kbd "C-S-b") #'backward-word)
  (define-key god-local-mode-map (kbd "C-S-k") #'previous-line)
  (define-key god-local-mode-map (kbd "C-S-j") #'next-line)
  (define-key god-local-mode-map (kbd "C-d") #'kill-region-or-forward-delete)
  (define-key god-local-mode-map (kbd "C-p") #'org-backward-sentence)
  (define-key god-local-mode-map (kbd "C-n") #'org-forward-sentence)
  (define-key god-local-mode-map (kbd "C-S-p") #'org-backward-sentence)
  (define-key god-local-mode-map (kbd "C-S-n") #'org-forward-sentence)
  (define-key god-local-mode-map (kbd "C-\\") #'universal-argument)
  ;; Navigation Keybinds
  (define-key god-local-mode-map (kbd "C-S-i") #'tl/org-cycle-or-shift-tab)
  (define-key god-local-mode-map (kbd "C-S-q") #'goto-last-change)
  (define-key god-local-mode-map (kbd "C-S-o") #'goto-last-change-reverse)
  (define-key god-local-mode-map (kbd "C-;") #'recenter-top-bottom)
  (define-key god-local-mode-map (kbd "C-:") #'move-to-window-line-top-bottom)
  (define-key god-local-mode-map (kbd "C-t") #'zap-up-to-char)
  (define-key god-local-mode-map (kbd "C-u") #'tl/newline-at-end-of-line)
  ;(define-key god-local-mode-map (kbd "C-S-r") #'rectangle-mark-mode)    ;; Currently not working as epxected (press 't' to replace chars)
  (define-key god-local-mode-map (kbd "C-S-d") #'org-babel-mark-block)
  (define-key god-local-mode-map (kbd "C-S-s") #'er/mark-symbol)
  (define-key god-local-mode-map (kbd "C-S-u") #'mark-whole-line)
  (define-key god-local-mode-map (kbd "C-~") #'capitalize-word)
  (define-key god-local-mode-map (kbd "C-|") #'gptel-abort)
  (define-key god-local-mode-map (kbd "C-S-v") #'join-line)
  (define-key god-local-mode-map (kbd "C-S-W") #'tl/copy-down-current-line-or-region)
  ;; Syntax highlighting for org-mode
  (define-key god-local-mode-map (kbd "C-S-z") #'surround-bold)
  (define-key god-local-mode-map (kbd "C-S-x") #'surround-italic)
  (define-key god-local-mode-map (kbd "C-S-c") #'surround-code)
  ;(define-key god-local-mode-map (kbd "C-S-v") #'surround-underline)   ;; not using

  (require 'god-mode-isearch)
  (define-key isearch-mode-map (kbd "C-@") #'god-mode-isearch-activate)
  (define-key god-mode-isearch-map (kbd "C-@") #'god-mode-isearch-disable)
  
  ;; Visual indicators for God mode
  (custom-set-faces
   '(god-mode-lighter ((t (:inherit error))))))
#+end_src

** Goto-chg
The goto-chg package provides a direct equivalent to Vim's C-o and C-i keybinds.
It allows you to jump to the locations of the last changes made in the buffer:
#+begin_src emacs-lisp
(use-package goto-chg
  :ensure t)
#+end_src

* Org Mode
** Essential packages
*** Org-toc

#+begin_src emacs-lisp
(use-package toc-org
  :commands toc-org-enable
  :init
  (add-hook 'org-mode-hook 'toc-org-enable)
  :config
  (setq org-export-with-toc t)
  (setq org-export-with-toc-depth 4)       ;; Generate TOC with 4 headlines by default
  (setq org-startup-folded 'show3levels))  ;; Show only 3 levels of TOC on startup
#+end_src

*** Org-superstar

#+begin_src emacs-lisp
(use-package org-superstar
  :ensure t
  :config
  (setq org-superstar-headline-bullets-list '("◉" "○" "◈" "◇" "◆")
		  org-superstar-item-bullet-alist '((?- . ?•) (?+ . ?➤) (?* . ?▷))))

;; Hide leading stars
(setq org-hide-leading-stars nil
      org-superstar-leading-bullet ?\s
      org-indent-mode-turns-on-hiding-stars nil
      org-superstar-remove-leading-stars t)

;; This variable also holds further information regarding significant slowdown
(setq inhibit-compacting-font-caches t)

(add-hook 'org-mode-hook 'org-indent-mode)
(add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
#+end_src

*** Org-transclusion
There’s a really cool package to transclude =Org= document content.

#+begin_src emacs-lisp
(use-package org-transclusion
  :ensure t
  :after org)
#+end_src

*** Org-appear
While =org-hide-emphasis-markers= is very nice, it can sometimes make edits which occur at the border a bit more fiddley. We can improve this situation without sacrificing visual amenities with the =org-appear= package. 

#+begin_src emacs-lisp
(use-package org-appear
 :ensure t
 :hook (org-mode . org-appear-mode)
 :config
 (setq org-appear-autoemphasis t
       org-appear-autosubmarkers t)
 (run-at-time nil nil #'org-appear--set-elements))
#+end_src

*** Org-mode-visual-fill
I use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] to center =org-mode= buffers for centering the contents of the buffer horizontally to seem more like you are editing a document.

#+begin_src emacs-lisp
(defun tl/visual-fill-column-agenda ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

(defun tl/visual-fill-column ()
  (setq visual-fill-column-width 150         ;; check 130/150
        visual-fill-column-center-text t)
    (visual-fill-column-mode 1))
  
;; Load and configure visual-fill-column package
(use-package visual-fill-column
  :ensure t
  :hook ((org-mode text-mode) . tl/visual-fill-column))

;; Enable visual-fill specifically for agenda buffers
(add-hook 'org-agenda-mode-hook #'tl/visual-fill-column-agenda)
#+end_src

*** Org-alert

#+begin_src emacs-lisp
(use-package org-alert
  :ensure t
  :config 
  (setq alert-default-style 'libnotify      ;; get system notifications
		  org-alert-interval 300              ;; alert interval (300 seconds)
		  org-alert-notify-cutoff 10          ;; how long before a scheduled event a notification should be sent - 10 minutes
		  org-alert-notify-after-event-cutoff 5  ;; controls how long after a scheduled event to continue sending notifications - 5 minutes
		  org-alert-notification-title "Emacs Agenda")  ;; org-alert uses the title *org* by default
  (org-alert-enable))
#+end_src

*** Hl-todo
Adding highlights to =TODO= and related words.

#+begin_src emacs-lisp
(use-package hl-todo
  :hook ((org-mode . hl-todo-mode)
         (prog-mode . hl-todo-mode))
  :config
  (setq hl-todo-highlight-punctuation ":"
        hl-todo-keyword-faces
        `(("TODO"       warning bold)
          ("DOING"      "#5af78e")
          ("NEXT"     . "#fac863")
          ("SOMEDAY"  . "#81a2be")
          ("DONE"       font-lock-doc-face bold)
          ("FINISHED"   font-lock-doc-face bold)
          ("CANC"       error bold)))
  ;; Must be bound here to work
  (define-key hl-todo-mode-map (kbd "C-x n") #'hl-todo-next)
  (define-key hl-todo-mode-map (kbd "C-x p") #'hl-todo-previous))
#+end_src

*** Org-fancy-priorities

#+begin_src emacs-lisp
;; Enable prettify-symbols-mode
(global-prettify-symbols-mode 1)

;; Org symbols/priorities
(use-package org-fancy-priorities
  :ensure t
  :hook
  (org-mode . org-fancy-priorities-mode)
  :config
  (setq
    org-priority-highest ?A
    org-priority-lowest ?C
    ;;org-fancy-priorities-list '("[A]" "[B]" "[C] "[D])
    org-fancy-priorities-list '("" "" "" "")
    org-priority-faces
    '((?A . 'all-the-icons-red)
      (?B . 'all-the-icons-orange)
      (?C . '(:foreground "#FFD700")) ;; Adjusted for brighter yellow
      ;(?C . 'all-the-icons-yellow)
      (?D . 'all-the-icons-green))))
#+end_src

** Editing features for org
*** File links automation
While =org-insert-link= is all very well and good, a large portion of the time I want to insert a file, and so it would be good to have a way to skip straight to that and avoid the description prompt. Looking at =org-link-parameters=, we can see that the ="file"= link type uses the completion function =org-link-complete-file=, so let's use that to make a little file-link inserting function.

#+begin_src emacs-lisp
(defun tl/org-insert-file-link ()
  "Insert a file link.  At the prompt, enter the filename."
  (interactive)
  (insert (format "[[%s]]" (org-link-complete-file))))
#+end_src

*** Insert all links to directory

#+begin_src emacs-lisp
(defun org-insert-links-to-directory (directory)
  "Insert Org mode links to all files in the specified DIRECTORY."
  (interactive "DSelect directory: ")
  (mapc (lambda (file)
          (insert (format "[[file:%s][%s]]\n" file (file-name-nondirectory file))))
        (directory-files directory t "^[^\\.]" t)))
#+end_src

*** Style formatting
This controls the color of *bold*, /italic/, _underline_, verbatim, +strikethrough+ in org-mode.

#+begin_src emacs-lisp
(setq org-emphasis-alist
'(("*" (bold :slant italic :weight black ))
  ("/" (italic :foreground "dark salmon" ))   ;; Warning: Creates conflicts
  ("_" (underline :foreground "cyan" ))
  ("=" (:foreground "PaleGreen1" ))
  ("~" (:foreground "dim gray" ))   ;; Other colors could be: snow1, PaleGreen1
  ("+" (:strike-through nil :foreground "slate blue" ))))
#+end_src

*** Style formatting automation
These functions automates the surround of word for style formatting with respective keys in visual mode.

#+begin_src emacs-lisp
(defun surround-with-bold (beg end)
  "Surround the region between BEG and END with asterisks for bold formatting."
  (interactive "r")
  (if (use-region-p)
      (let ((region (buffer-substring-no-properties beg end)))
        (delete-region beg end)
        (insert (concat "*" region "*")))
    (insert "*")))

(defun surround-with-code (beg end)
  "Surround the region between BEG and END with equal signs for code formatting."
  (interactive "r")
  (if (use-region-p)
      (let ((region (buffer-substring-no-properties beg end)))
        (delete-region beg end)
        (insert (concat "=" region "=")))
    (insert "=")))

(defun surround-with-italic (beg end)
  "Surround the region between BEG and END with slash signs for italic formatting."
  (interactive "r")
  (if (use-region-p)
      (let ((region (buffer-substring-no-properties beg end)))
        (delete-region beg end)
        (insert (concat "/" region "/")))
    (insert "/")))

(defun surround-with-underline (beg end)
  "Surround the region between BEG and END with underscores for underline formatting."
  (interactive "r")
  (if (use-region-p)
      (let ((region (buffer-substring-no-properties beg end)))
        (delete-region beg end)
        (insert (concat "_" region "_")))
    (insert "_")))

(defun surround-with-quote (beg end)
  "Surround the region between BEG and END with single quotes."
  (interactive "r")
  (if (use-region-p)
      (let ((region (buffer-substring-no-properties beg end)))
        (delete-region beg end)
        (insert (concat "'" region "'")))
    (insert "'")))

(defun surround-with-double-quote (beg end)
  "Surround the region between BEG and END with double quotes."
  (interactive "r")
  (if (use-region-p)
      (let ((region (buffer-substring-no-properties beg end)))
        (delete-region beg end)
        (insert (concat "\"" region "\"")))
    (insert "\"")))

(defun surround-bold ()
  "Perform surround operation if in region."
  (interactive)
  (if (use-region-p)
      (surround-with-bold (region-beginning) (region-end))))

(defun surround-code ()
  "perform surround operation if in region."
  (interactive)
  (if (use-region-p)
      (surround-with-code (region-beginning) (region-end))))

(defun surround-italic ()
  "period or perform surround operation if in region."
  (interactive)
  (if (use-region-p)
      (surround-with-italic (region-beginning) (region-end))))

(defun surround-underline ()
  "perform surround operation if in region."
  (interactive)
  (if (use-region-p)
      (surround-with-underline (region-beginning) (region-end))))
#+end_src

*** Copy surround automation

#+begin_src emacs-lisp
(defun copy-surrounded-by-equals ()
  "Copy text surrounded by equals signs on the current line to the system clipboard."
  (interactive)
  (let* ((text (thing-at-point 'line t))
         (equal-text (when (and text (string-match "=\\(.*?\\)=" text))
                       (match-string 1 text))))
    (if equal-text
        (progn
          (kill-new equal-text)
          (start-process "wl-copy" "*wl-copy*" "wl-copy" equal-text)
          (message "Copied to clipboard: %s" equal-text))
      (message "No text surrounded by equals signs found on the current line."))))

(defun copy-surrounded-by-stars ()
  "Copy text surrounded by stars on the current line to the system clipboard."
  (interactive)
  (let* ((text (thing-at-point 'line t))
         (starred-text (when (and text (string-match "\\*\\(.*?\\)\\*" text))
                         (match-string 1 text))))
    (if starred-text
        (progn
          (kill-new starred-text)
          (start-process "wl-copy" "*wl-copy*" "wl-copy" starred-text)
          (message "Copied to clipboard: %s" starred-text))
      (message "No text surrounded by stars found on the current line."))))
#+end_src

*** Heading focus
If you want to see other headings while you are edit the current one, I found a [[https://stackoverflow.com/questions/25161792/emacs-org-mode-how-can-i-fold-everything-but-the-current-headline/28031539#28031539][StackOverflow]] answer and adapted for my need.

#+begin_src emacs-lisp
(defun org-show-current-heading-tidily ()
  (interactive)  ;Inteactive
  "Show next entry, keeping other entries closed."
  (if (save-excursion (end-of-line) (outline-invisible-p))
      (progn (org-show-entry) (show-children))
    (outline-back-to-heading)
    (unless (and (bolp) (org-on-heading-p))
      (org-up-heading-safe)
      (hide-subtree)
      (error "Boundary reached"))
    (org-overview)
    (org-reveal t)
    (org-show-entry)
    (show-children)))
#+end_src

*** Open images in external editor

#+begin_src emacs-lisp
;; Open images in external editor such as swappy
(defun tl/open-image-external-from-org ()
  "Open the image at point in an external viewer like swappy."
  (interactive)
  (let* ((file (org-element-property :path (org-element-context)))
         (full-path (expand-file-name file)))
    (start-process "swappy" nil "swappy" "-f" full-path)))
#+end_src

*** Open videos in mpv

#+begin_src emacs-lisp
(defun tl/open-video-link-in-mpv ()
  "Open the video link at point in mpv."
  (interactive)
  (let ((link (org-element-lineage (org-element-context) '(link) t)))
    (if (and link (string= "file" (org-element-property :type link)))
        (let ((path (expand-file-name (org-element-property :path link))))
          (if (file-exists-p path)
              (start-process "mpv" nil "mpv" path)
            (message "File not found: %s" path)))
      (message "Not a valid file link"))))
#+end_src

*** Narrow to subtree
After executing =org-narrow-to-subtree= I want to be ableto move the narrowing along with point to the next subtree.

#+begin_src emacs-lisp
(defun tl/org-narrow-forward ()
  "Move to the next subtree at same level, and narrow to it."
  (interactive)
  (widen)
  (org-forward-heading-same-level 1)
  (org-narrow-to-subtree))

(defun tl/org-narrow-backward ()
  "Move to the next subtree at same level, and narrow to it."
  (interactive)
  (widen)
  (org-backward-heading-same-level 1)
  (org-narrow-to-subtree))
#+end_src

*** Next/Previous sentence adjustment

#+begin_src emacs-lisp
(defun tl/next-sentence ()
  "Move point forward to the next sentence.
Start by moving to the next period, question mark or exclamation.
If this punctuation is followed by one or more whitespace
characters followed by a capital letter, or a '\', stop there. If
not, assume we're at an abbreviation of some sort and move to the
next potential sentence end"
  (interactive)
  (re-search-forward "[.?!]")
  (if (looking-at "[    \n]+[A-Z]\\|\\\\")
      nil
    (tl/next-sentence)))

(defun tl/previous-sentence ()
  "Does the same as 'tl/next-sentence' except it goes in reverse"
  (interactive)
  (re-search-backward "[.?!][   \n]+[A-Z]\\|\\.\\\\" nil t)
  (forward-char))

(defun tl/kill-sentence ()
  "Kill from point to the end of the current sentence."
  (interactive)
  (let ((end-of-sentence (save-excursion (re-search-forward "[.?!]") (point))))
    (kill-region (point) end-of-sentence)))

(defun tl/backward-kill-sentence ()
  "Kill back to the start of the current sentence."
  (interactive)
  (let ((start-of-sentence (save-excursion (re-search-backward "[.?!]") (point))))
    (kill-region (point) start-of-sentence)))
#+end_src

*** Source code block tag expansion
=Org-tempo= allows for =<s= followed by TAB to expand to a =begin_src= tag.

#+begin_src emacs-lisp
(with-eval-after-load 'org
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python")))
#+end_src

*** Zero-width spaces
Occasionally in Org you run into annoyances where you want to have two seperate blocks right together without a space. For example, to *emp​h*​asise part of a word, or put a currency symbol immediately before an inline source block. Zero width spaces are hacky but because this is emacs, we can make this feel much less hacky by making a minor addition to the org key map. Add filter to stop the space from being included in exports.

#+begin_src emacs-lisp
(defun org-export-remove-zero-width-space (text backend info)
  "Remove zero width spaces from TEXT."
  (unless (org-export-derived-backend-p backend 'org)
    (replace-regexp-in-string "\u200B" "" text)))

(eval-after-load 'ox
  '(add-to-list 'org-export-filter-final-output-functions #'org-export-remove-zero-width-space t))
#+end_src

*** Insert date
Some custom functions to insert the date.

 #+begin_src emacs-lisp
(defun tl/insert-todays-date (prefix)
  (interactive "P")
  (let ((format (cond
                 ((not prefix) "%A, %B %d, %Y")
                 ((equal prefix '(4)) "%m-%d-%Y")
                 ((equal prefix '(16)) "%Y-%m-%d"))))
    (insert (format-time-string format))))

(require 'calendar)
(defun tl/insert-any-date (date)
  "Insert DATE using the current locale."
  (interactive (list (calendar-read-date)))
  (insert (calendar-date-string date)))
#+end_src

*** Org buffer creation automation
Let’s make creating an Org buffer just that little bit easier.

#+begin_src emacs-lisp
(defun tl/buffer-org-new (file)
  "Creates a new ORG buffer replacing the current window, optionally
   editing a certain FILE"
  (interactive "P<f>")
  (if file
      (find-file file)
    (let ((buffer (generate-new-buffer "*new org*")))
      (set-window-buffer nil buffer)
      (with-current-buffer buffer
        (org-mode)
        (setq-local doom-real-buffer-p t)))))
#+end_src

*** Create new org buffer
#+begin_src emacs-lisp
(defun tl/create-org-buffer ()
  "Switch to an existing Org mode buffer named *org scratchpad*, or create a new one.
Automatically save the buffer to /tmp/ and load the last saved version if it exists."
  (interactive)
  (let ((buffer-name "*org scratchpad*")
        (file-path "~/documents/org/org-scratchpad.org"))
    (if (get-buffer buffer-name)
        (switch-to-buffer buffer-name)
      (if (file-exists-p file-path)
          (progn
            (find-file file-path)
            (rename-buffer buffer-name))
        (switch-to-buffer (generate-new-buffer buffer-name))
        (org-mode)
        (write-file file-path)))
    (add-hook 'after-save-hook
              `(lambda ()
                 (when (string= (buffer-name) ,buffer-name)
                   (let ((file-path ,file-path))
                     (save-buffer)
                     (message "Auto-saved *org scratchpad* to %s" file-path))))
              nil t)))

(defun tl/save-scratchpad ()
  "Save the *org scratchpad* buffer to ~/.cache/org-scratchpad.org."
  (let ((buffer-name "*org scratchpad*")
        (file-path "~/documents/org/org-scratchpad.org"))
    (when (get-buffer buffer-name)
      (with-current-buffer buffer-name
        (save-buffer)
        (write-file file-path)
        (message "Manually saved *org scratchpad* to %s" file-path)))))


;; Enable lexical binding for the lambda function to capture variables.
(setq-default lexical-binding t)
#+end_src

** Org configuration
*** Org-mode font faces

#+begin_src emacs-lisp
(defun tl/org-font-setup ()
  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . "#50C1F7")
                  (org-level-2 . "#84DDF8")
                  (org-level-3 . "#7FA7FB")
                  (org-level-4 . "#FA95A2")
                  (org-level-5 . "#50C1F7")
                  (org-level-6 . "#84DDF8")
                  (org-level-7 . "#7FA7FB")
                  (org-level-8 . "#FA95A2")))
        (set-face-attribute (car face) nil
                        :foreground (cdr face)
                        :font "Jetbrains Mono Nerd Font"
                        :weight 'normal))

  ;; Fixed-pitch settings
  (dolist (face '(org-block org-table org-formula org-code
                  org-verbatim org-special-keyword org-meta-line
                  org-checkbox line-number line-number-current-line))
    (set-face-attribute face nil :inherit '(shadow fixed-pitch))))

;; Call org-font-setup when entering org-mode
(add-hook 'org-mode-hook #'tl/org-font-setup)

;; Increase title size
(custom-set-faces
  '(org-document-title ((t (:height 1.2)))))

;; Make quote blocks italic style format
(setq org-fontify-quote-and-verse-blocks t)

;; Org files can be rather nice to look at, particularly with some of the customisations here. This comes at a cost however, expensive font-lock. Feeling like you’re typing through molasses in large files is no fun, but there is a way I can defer font-locking when typing to make the experience more responsive.
;; Apparently this causes issues with some people, but I haven’t noticed anything problematic beyond the expected slight delay in some fontification, so until I do I’ll use the above.
(defun locally-defer-font-lock ()
  "Set jit-lock defer and stealth, when buffer is over a certain size."
  (when (> (buffer-size) 50000)
    (setq-local jit-lock-defer-time 0.05
                jit-lock-stealth-time 1)))

;(add-hook 'org-mode-hook #'locally-defer-font-lock)

;; Using org-src-font-lock-fontify-block we can apply language-appropriate syntax highlighting. Then, continuing on to {{{results(...)}}} , it can have the org-block face applied to match, and then the value-surrounding constructs hidden by mimicking the behaviour of prettify-symbols-mode. 
(setq org-inline-src-prettify-results '("⟨" . "⟩"))
#+end_src

*** Org-mode config

#+begin_src emacs-lisp
(setq org-directory "~/documents/org/agenda"
      org-default-notes-file (expand-file-name "inbox.org" org-directory)
      org-ellipsis " ▼ "                           ; Elipsis character for folding headings
      org-log-done 'time                           ; Having the time a item is done sounds
      org-list-demote-modify-bullet '(("+" . "-") ("-" . "+") ("1." . "*") ("1." . "a."))
      org-hide-emphasis-markers nil
      ;; ex. of org-link-abbrev-alist in action
      ;; [[arch-wiki:Name_of_Page][Description]]
      org-link-abbrev-alist    ; This overwrites the default Doom org-link-abbrev-list
        '(("google" . "http://www.google.com/search?q=")
          ("arch-wiki" . "https://wiki.archlinux.org/index.php/")
          ("ddg" . "https://duckduckgo.com/?q=")
          ("wiki" . "https://en.wikipedia.org/wiki/"))
      org-table-convert-region-max-lines 20000
      org-auto-align-tags nil
      org-tags-column 0
      org-special-ctrl-a/e t
      org-insert-heading-respect-content t
      org-export-with-sub-superscripts '{}         ; Don't treat lone _ / ^ as sub/superscripts, require _{} / ^{}
      org-export-allow-bind-keywords t             ; Bind keywords can be handy
      org-use-property-inheritance t               ; It's convenient to have properties inherited
      org-catch-invisible-edits 'smart             ; Try not to accidently do weird stuff in invisible regions
      org-image-actual-width '(0.9)                ; Make the in-buffer display closer to the exported result
      org-pretty-entities t
      org-todo-keywords
        '((sequence
           "TODO(t)"
           "DOING(d)"
           "NEXT(n)"
           "SOMEDAY(s)"
           "|"             ; The pipe necessary to separate "active" states and "inactive" states
           "CANC(c)"
           "FINISHED(f)"
           "DONE(D)")))

;; Org-habit config
(require 'org-habit)
(setq org-habit-graph-column 60)

;; Org-tags config
(setq org-tag-alist
  '((:startgroup)
     ;; Overview agenda
     ("@Work" . ?w)
     ("@Important" . ?i)
     ("@Assignment" . ?a)
     ("@Issue" . ?U)
     ("@Research" . ?e)
     ("@Habit" . ?h)
     ("@Privacy" . ?p)
     ("@Project" . ?j)
     ("@Watch" . ?W)
     ("@Purchase" . ?u)
     ("@Read" . ?R)
     ("@Trivial" . ?t)
     ("@Calendar" . ?c)
     (:endgroup)
))
#+end_src

*** Org-modern
Fontifying org-mode buffers to be as pretty as possible is of paramount importance, and Minad’s lovely =org-modern= goes a long way in this regard.

#+begin_src emacs-lisp
(use-package org-modern
  :ensure t
  ;:hook (org-mode . org-modern-mode)
  :config
  (setq org-modern-star '("◉" "○" "◈" "◇" "◆" "●")
        org-modern-table-vertical 1
        org-modern-table-horizontal 0.2
        org-modern-list '((45 . "➤")
                          (43 . "•")
                          (42 . "-"))
        org-modern-todo-faces
        '(("TODO" :inverse-video t :inherit org-todo)
          ("DOING" :inverse-video t :inherit +org-todo-active)
          ("NEXT" :inverse-video t :inherit +org-todo-active)
          ("SOMEDAY" :inverse-video t :inherit +org-todo-onhold)
          ("DONE" :inverse-video t :inherit +org-todo-cancel)
          ("FINISHED" :inverse-video t :inherit +org-todo-onhold)
          ("CANC" :inverse-video t :inherit +org-todo-onhold))
        org-modern-footnote
        (cons nil (cadr org-script-display))
        org-modern-block-fringe nil
        org-modern-block-name
        '((t . t)
          ("src" "»" "«")
          ("example" "»–" "–«")
          ("quote" "❝" "❞")
          ("export" "⏩" "⏪")
          ;; New block names
          ("list" "∷" "∷")
          ("em_dash" "—" "—")
          ("ellipses" "…" "…")
          ("arrow_right" "→" "→")
          ("arrow_left" "←" "←")
          ("arrow_lr" "↔" "↔")
          ("properties" "⚙" "⚙")
          ("end" "∎" "∎"))
        org-modern-horizontal-rule (make-string 36 ?─)
        org-modern-keyword
        '((t . t)
          ("title" . "𝙏")
          ("subtitle" . "𝙩")
          ("author" . "𝘼")
          ("chapter" . "§")
          ("year" . "𝘿")
          ("email" . #("" 0 1 (display (raise -0.14))))
          ("date" . "𝘿")
          ("property" . "☸")
          ("options" . "⌥")
          ("startup" . "⏻")
          ("macro" . "𝓜")
          ("bind" . #("" 0 1 (display (raise -0.1))))
          ("print_glossary" . #("ᴬᶻ" 0 1 (display (raise -0.1))))
          ("glossary_sources" . #("" 0 1 (display (raise -0.14))))
          ("include" . "⇤")
          ("setupfile" . "⇚")
          ("html_head" . "🅷")
          ("html" . "🅗")
          ("latex_class" . "🄻")
          ("latex_class_options" . #("🄻" 1 2 (display (raise -0.14))))
          ("latex_header" . "🅻")
          ("latex_header_extra" . "🅻⁺")
          ("latex" . "🅛")
          ("beamer_theme" . "🄱")
          ("beamer_color_theme" . #("🄱" 1 2 (display (raise -0.12))))
          ("beamer_font_theme" . "🄱𝐀")
          ("beamer_header" . "🅱")
          ("beamer" . "🅑")
          ("attr_latex" . "🄛")
          ("attr_html" . "🄗")
          ("attr_org" . "⒪")
          ("call" . #("" 0 1 (display (raise -0.15))))
          ("name" . "⁍")
          ("header" . "›")
          ("caption" . "☰")
          ("results" . "🠶"))))

;; Add frame borders and window dividers
(modify-all-frames-parameters
 '((right-divider-width . 40)
   (internal-border-width . 40)))
(dolist (face '(window-divider
                window-divider-first-pixel
                window-divider-last-pixel))
  (face-spec-reset-face face)
  (set-face-foreground face (face-attribute 'default :background)))
(set-face-background 'fringe (face-attribute 'default :background))

;; Enable Org-modern per buffer
;(add-hook 'org-mode-hook #'org-modern-mode)
;(add-hook 'org-agenda-finalize-hook #'org-modern-agenda)
#+end_src

*** Org-super-agenda

#+begin_src emacs-lisp
(use-package org-super-agenda
  :ensure t
  :after org
  :config
  (org-super-agenda-mode))

;; Doesn't affect anything since I use org-gtd package
(setq org-agenda-files
    (directory-files "~/documents/org/agenda"))

(setq org-archive-location "~/documents/org/agenda/archive/%s_archive::")

;; Don't show these holidays
'(holiday-bahai-holidays nil)
'(holiday-hebrew-holidays nil)
'(holiday-islamic-holidays nil)
'(holiday-solar-holidays nil)
'(holiday-oriental-holidays nil)
'(holiday-equinoxes-holidays nil)
'(holiday-solstices-holidays nil)

(setq org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-include-deadlines t
      org-agenda-include-diary t
      org-agenda-block-separator nil
      org-agenda-tags-column 100
      org-deadline-warning-days 30
      org-return-follows-link t
      org-use-speed-commands t
      org-agenda-compact-blocks t
      org-agenda-archives-mode t)

;; Ricing org agenda
(setq org-agenda-current-time-string "◀── now ─────────────────────────────────────────────────")
(setq org-agenda-time-grid '((daily) () " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄"))

;; Cleanup agenda view
(setq org-agenda-prefix-format
      '((agenda . " %i %-12:c%?-12t")
        (todo . " %i  ")
        (tags . " %i %-12:c")
        (search . " %i %-12:c")))

;; Hide tags from agenda view
(setq org-agenda-hide-tags-regexp ".*")

;; It seems reasonable to have deadlines in the error face when they’re passed.
(setq org-agenda-deadline-faces
      '((1.001 . error)
        (1.0 . org-warning)
        (0.5 . org-upcoming-deadline)
        (0.0 . org-upcoming-distant-deadline)))

;; Agenda commands
(defun tl/org-agenda-t ()
  "Run org agenda command 'o'."
  (interactive)
  (org-agenda nil "t"))

(defun tl/org-agenda-e ()
  "Run org agenda command 'o'."
  (interactive)
  (org-agenda nil "e"))

(defun tl/org-agenda-o ()
  "Run org agenda command 'o'."
  (interactive)
  (org-agenda nil "o"))

(setq org-agenda-custom-commands
      '(("o" "Overview"
         ((agenda "" ((org-agenda-span 'day)
                      (org-super-agenda-groups
                       '((:name "󰃶 Today"
                          :time-grid t
                          :date today
                          :scheduled today
                          :order 1)))))
          (alltodo "" ((org-agenda-overriding-header "")
                       (org-super-agenda-groups
                        '((:name "󰚌 Overdue"
                           :deadline past
                           :face error
                           :order 1)
                          (:name "󰃶 Due Today"
                           :deadline today
                           :order 2)
                          (:name " Important"
                           :tag "@Important"
                           :priority "A"
                           :order 3)
                          (:name " Career-Related"
                           :tag "@Work"
                           :order 4)
                          (:name "󰥖 Osint Tasks"
                           :tag "@Osint"
                           :order 5)
                          (:name "󰈈 Privacy"
                           :tag "@Privacy"
                           :order 6)
                          (:name " Assignments"
                           :tag "@Assignment"
                           :order 7)
                          (:name "Issues"
                           :tag "@Issue"
                           :order 8)
                          (:name " Projects"
                           :tag "@Project"
                           :order 9)
                          (:name " Research"
                           :tag "@Research"
                           :order 10)
                          (:name " Due Soon"
                           :deadline future
                           :order 20)
                          (:name " To Read"
                           :tag "@Read"
                           :order 30)
                          (:name " To Watch"
                           :tag "@Watch"
                           :order 31)
                          (:name " To Buy"
                           :tag "@Purchase"
                           :order 32)
                          (:name " Daily Habits"
                           :tag "@Habit"
                           :order 60)
                          (:name "󰃶 Calendar"
                           :tag "@Calendar"
                           :order 90)
                          (:name "Trivial"
                           :priority<= "C"
                           :tag "@Trivial"
                           :todo ("SOMEDAY")
                           :order 80)))))))))

(add-to-list 'org-agenda-custom-commands
             '("t" "Today"
               (
                (tags-todo "+SCHEDULED<=\"<today>\""
                           ((org-agenda-overriding-header "Today")
                            (org-agenda-files org-agenda-files))))))

(add-to-list 'org-agenda-custom-commands
             '("e" "Low Effort Tasks"
               tags-todo "+TODO=\"NEXT\"|+TODO=\"DOING\"+Effort<15&+Effort>0"
               (
                (org-agenda-overriding-header "Low Effort Tasks")
                (org-agenda-max-todos 20)
                (org-agenda-files org-agenda-files))))
#+end_src

*** Org-agenda
Make it easy to mark a task as done.
#+begin_src emacs-lisp
;; Load Org mode
(require 'org)

(defun tl/org-agenda-done (&optional arg)
  (interactive "P")
  (org-agenda-todo "FINISHED")
  (org-agenda-redo-all))
#+end_src

Make it easy to mark a task as done and create a follow-up task.
#+begin_src emacs-lisp
  (defun tl/org-agenda-mark-done-and-add-followup ()
    "Mark the current TODO as done and add another task after it.
Creates it at the same level as the previous task, so it's better to use
this with to-do items than with projects or headings."
    (interactive)
    (org-agenda-todo "FINISHED")
    (org-agenda-redo-all)
    (org-agenda-switch-to)
    (org-capture 0 "t"))
#+end_src

Capture something based on the agenda position.
#+begin_src emacs-lisp
(defun tl/org-agenda-new ()
  "Create a new note or task at the current agenda item.
Creates it at the same level as the previous task, so it's better to use
this with to-do items than with projects or headings."
  (interactive)
  (org-agenda-switch-to)
  (org-capture 0))
#+end_src

*** Org-gtd-capture

#+begin_src emacs-lisp
(setq org-gtd-capture-templates
  `(("t" "Todo" entry (file "~/documents/org/agenda/inbox.org")
         "* TODO %?\n  %U\n\n  %i" :empty-lines 1 :kill-buffer t)

    ("l" "Todo with link" entry (file "~/documents/org/agenda/inbox.org")
         "* TODO %?\n  %U\n  %i\n %a" :empty-lines 1 :kill-buffer t)

    ("a" "Appointment" entry (file "~/documents/org/agenda/inbox.org")
         "* %<%I:%M %p> - %a :appointments:\n\n%?\n\n"
         :clock-in :clock-resume
         :empty-lines 1
	       :kill-buffer t)))
#+end_src

*** Org-roam

#+begin_src emacs-lisp
(use-package org-roam
  :ensure t
  :custom
  (org-roam-directory "~/documents/org/roam/")
  (org-roam-dailies-directory "~/documents/org/roam/journal/")
  (org-roam-completion-everywhere t)
  (org-roam-graph-viewer "/usr/bin/brave-browser")
  :config
  (require 'org-roam-dailies) ;; Ensure the keymap is available
  (org-roam-setup))

;; Fast note insertion for a smoother writing flow
;; Define a function that enables you to create a new note and insert a link in the current document without opening the new note’s buffer
;; This function takes the first capture template in org-roam-capture-templates (usually the “default” template) and adds the :immediate-finish t capture property to prevent the note buffer from being loaded once capture finishes
(defun org-roam-node-insert-immediate (arg &rest args)
  (interactive "P")
  (let ((args (cons arg args))
        (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                  '(:immediate-finish t)))))
    (apply #'org-roam-node-insert args)))

;; Company completion backend for Org-roam 
;(use-package company-org-roam
;  :after org-roam
;  :config
;  (set-company-backend! 'org-mode '(company-org-roam company-yasnippet company-dabbrev)))
#+end_src

*** Org-roam-capture

#+begin_src emacs-lisp
;; Org-roam templates
(setq org-roam-capture-templates
  '(("d" "default" plain "%?"
      :target (file+head "${slug}.org" "#+title: ${title}\n")
      :unnarrowed t)
    ("l" "Logbook Templates")
	  ("li" "Internal Pentest Logbook" plain
     (file "~/documents/org/templates/logbook/ipt-logbook.org")
     :if-new (file "~/documents/org/reports/ipt_${slug}_logbook.org")
     :unnarrowed t)
	  ("le" "External Pentest Logbook" plain
     (file "~/documents/org/templates/logbook/ept-logbook.org")
     :if-new (file "~/documents/org/reports/ipt_${slug}_logbook.org")
     :unnarrowed t)
    ("r" "Report Templates")
    ("ri" "Internal Pentest Findings Report" plain
     (file "~/documents/org/templates/reports/ipt-report.org")
     :if-new (file+head "~/documents/org/reports/ipt_${slug}_report.org" "#+title: ${title}\n")
     :unnarrowed t)
    ("re" "External Pentest Findings Report" plain
     (file "~/documents/org/templates/reports/ept-report.org")
     :if-new (file+head "~/documents/org/reports/ept_${slug}_report.org" "#+title: ${title}\n")
     :unnarrowed t)
    ("rs" "SE Findings Report" plain
     (file "~/documents/org/templates/reports/se-report.org")
     :if-new (file+head "~/documents/org/reports/se_${slug}_report.org" "#+title: ${title}\n")
     :unnarrowed t)
    ("rw" "Wireless Findings Report" plain
     (file "~/documents/org/templates/reports/wir-report.org")
     :if-new (file+head "~/documents/org/reports/wir_${slug}_report.org" "#+title: ${title}\n")
     :unnarrowed t)
    ("c" "Checklist Templates")
	  ("ci" "Internal Pentest Checklist" plain
     (file "~/documents/org/templates/checklists/ipt-checklist.org")
     :if-new (file "~/documents/org/reports/ipt_${slug}_checklist.org")
     :unnarrowed t)
	  ("ce" "External Pentest Checklist" plain
     (file "~/documents/org/templates/checklists/ept-checklist.org")
     :if-new (file "~/documents/org/reports/ept_${slug}_checklist.org")
     :unnarrowed t)
	  ("cS" "SDS Checklist" plain
     (file "~/documents/org/templates/checklists/sds-checklist.org")
     :if-new (file "~/documents/org/reports/sds_${slug}_checklist.org")
     :unnarrowed t)
	  ("cs" "SE Checklist" plain
     (file "~/documents/org/templates/checklists/se-checklist.org")
     :if-new (file "~/documents/org/reports/se_${slug}_checklist.org")
     :unnarrowed t)
	  ("cw" "Wireless" plain
     (file "~/documents/org/templates/checklists/wir-checklist.org")
     :if-new (file "~/documents/org/reports/wir_${slug}_checklist.org")
     :unnarrowed t)))

;; Logbook entry snippet
(defun tl/log-entry ()
  (interactive)
  (let ((current-date-time (format-time-string "%Y-%m-%d %I:%M %p")))
    (end-of-line)
    (insert-file-contents "~/documents/org/templates/logbook/log-entry.org")
    (next-line)
    (insert "#+DATE: " current-date-time "\n")
    (previous-line)
    (previous-line)
    (org-end-of-line)))

;; Logbook small entry snippet
(defun tl/log-entry-small ()
  (interactive)
  (let ((current-date-time (format-time-string "%Y-%m-%d %I:%M %p")))
    (end-of-line)
    (insert-file-contents "~/documents/org/templates/logbook/log-entry-small.org")
    (next-line)
    (insert "#+DATE: " current-date-time "\n")
    (previous-line)
    (previous-line)
    (org-end-of-line)))

;; Report entry snippet
(defun tl/report-entry ()
  (interactive)
  (let ((current-date-time (format-time-string "%Y-%m-%d %I:%M %p")))
    (end-of-line)
    (insert-file-contents "~/documents/org/templates/logbook/report-entry.org")
    (next-line)
    (insert "#+DATE: " current-date-time "\n")
    (previous-line)
    (previous-line)
    (org-end-of-line)))
#+end_src

*** Org-roam-dailies
Automatically move completed tasks to dailies - one interesting use for daily files is to keep a log of tasks that were completed on that particular day.

The following snippet sets up a hook for all Org task state changes and then moves the completed (DONE) entry to today’s note file.

#+begin_src emacs-lisp
;; Org-roam dailies capture templates
(setq org-roam-dailies-capture-templates
      '(("d" "default" entry "* %<%I:%M %p>: %?"
         :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))

(defun tl/org-roam-copy-finished-to-today ()
  (interactive)
  (let ((org-refile-keep nil) ;; Set this to nil to delete the original!
        (org-roam-dailies-capture-templates
          '(("t" "tasks" entry "%?"
             :if-new (file+head+olp "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n" ("Tasks")))))
        (org-after-refile-insert-hook #'save-buffer)
        today-file
        pos)
    (save-window-excursion
      (org-roam-dailies--capture (current-time) t)
      (setq today-file (buffer-file-name))
      (setq pos (point)))

    ;; Only refile if the target file is different than the current file
    (unless (equal (file-truename today-file)
                   (file-truename (buffer-file-name)))
      (org-refile nil nil (list "Tasks" today-file nil pos)))))

(add-to-list 'org-after-todo-state-change-hook
             (lambda ()
               (when (equal org-state "FINISHED")
                 (tl/org-roam-copy-finished-to-today))))

;; Old settings
;(setq org-refile-targets
;  '(("archive.org" :maxlevel . 1)))

;; Save Org buffers after refiling
;(advice-add 'org-refile :after 'org-save-all-org-buffers)

;; Org-journal (using org-roam-dailies anyways)
(setq org-journal-dir "~/documents/org/agenda"
      org-journal-date-prefix "* "
      org-journal-time-prefix "** "
      org-journal-date-format "%B %d, %Y (%A) "
      org-journal-file-format "%Y-%m-%d.org")
#+end_src

*** Org-roam-ui
 Org-roam is nice by itself, but there are so extra nice packages which integrate with it.

#+begin_src emacs-lisp
(use-package websocket
  :after org-roam)

(use-package org-roam-ui
  :after org-roam
  :commands org-roam-ui-open
  :hook (org-roam . org-roam-ui-mode)
  :config
  (require 'org-roam) ; in case autoloaded
  (defun org-roam-ui-open ()
    "Ensure the server is active, then open the roam graph."
    (interactive)
    (unless org-roam-ui-mode (org-roam-ui-mode 1))
    (browse-url-xdg-open (format "http://localhost:%d" org-roam-ui-port))))
#+end_src

*** Org-gtd

#+begin_src emacs-lisp
(setq org-gtd-update-ack "3.0.0")
(use-package org-gtd
  :after org
  ;:quelpa (org-gtd :fetcher github :repo "trevoke/org-gtd.el"
  ;                 :commit "3.0.0" :upgrade t)
  :demand t
  :custom
  (org-gtd-directory "~/documents/org/agenda")
  (org-gtd-areas-of-focus '("Work" "Social Life" "Side-hustle" "Habit"))
  (org-edna-use-inheritance t)
  (org-gtd-organize-hooks '(org-gtd-set-area-of-focus org-set-tags-command))
  :config
  (org-edna-mode)
  :bind
  (("C-x I" . org-gtd-clarify-item)  ;; Used in org-gtd-tasks.org buffer for quick changes
   :map org-gtd-clarify-map
   ("C-x c" . org-gtd-organize)))
#+end_src

** Exporting
*** General settings
By default Org only exports the first three levels of headings as … headings. This is rather unfortunate as my documents frequently stray far beyond three levels of depth. The two main formats I care about exporting to are LaTeX and HTML. When using an article class, LaTeX headlines go from =\section=, =\subsection=, =\subsubsection=, and =\paragraph= to =\subgraph= — five levels. HTML5 has six levels of headings (=<h1>= to =<h6>=), but first level Org headings get exported as =<h2>= elements — leaving five usable levels. 

As such, it would seem to make sense to recognise the first five levels of Org headings when exporting.
#+begin_src emacs-lisp
(setq org-export-headline-levels 5) ; I like nesting
#+end_src

Since I (roughly) track Org =HEAD=, it makes sense to include the git version in the creator string. 
#+begin_src emacs-lisp
(setq org-export-creator-string
      (format "Emacs %s (Org mode %s–%s)" emacs-version (org-release) (org-git-version)))
#+end_src

*** Exporting org code
With all our Org config and hooks, exporting an Org code block when using a font-lock based method can produce undesirable results. To address this, we can tweak =+org-babel-mode-alist= when exporting.

#+begin_src emacs-lisp
(defun +org-mode--fontlock-only-mode ()
  "Just apply org-mode's font-lock once."
  (let (org-mode-hook
        org-hide-leading-stars
        org-hide-emphasis-markers)
    (org-set-font-lock-defaults)
    (font-lock-ensure))
  (setq-local major-mode #'fundamental-mode))

(defun +org-export-babel-mask-org-config (_backend)
  "Use `+org-mode--fontlock-only-mode' instead of `org-mode'."
  (setq-local org-src-lang-modes
              (append org-src-lang-modes
                      (list (cons "org" #'+org-mode--fontlock-only)))))

(add-hook 'org-export-before-processing-hook #'+org-export-babel-mask-org-config)
#+end_src

*** HTML export
I want to tweak a whole bunch of things. While I’ll want my tweaks almost all the time, occasionally I may want to test how something turns out using a more default config. With that in mind, a global minor mode seems like the most appropriate architecture to use.

#+begin_src emacs-lisp
(define-minor-mode org-fancy-html-export-mode
  "Toggle my fabulous org export tweaks. While this mode itself does a little bit,
the vast majority of the change in behaviour comes from switch statements in:
 - `org-html-template-fancier'
 - `org-html--build-meta-info-extended'
 - `org-html-src-block-collapsable'
 - `org-html-block-collapsable'
 - `org-html-table-wrapped'
 - `org-html--format-toc-headline-colapseable'
 - `org-html--toc-text-stripped-leaves'
 - `org-export-html-headline-anchor'"
  :global t
  :init-value t
  (if org-fancy-html-export-mode
      (setq org-html-style-default org-html-style-fancy
            org-html-meta-tags #'org-html-meta-tags-fancy
            org-html-checkbox-type 'html-span)
    (setq org-html-style-default org-html-style-plain
          org-html-meta-tags #'org-html-meta-tags-default
          org-html-checkbox-type 'html)))
#+end_src

**** Extra header content
We want to tack on a few more bits to the start of the body. Unfortunately, there doesn’t seem to be any nice variable or hook, so we’ll just override the relevant function.

This is done to allow me to add the date and author to the page header, implement a CSS-only light/dark theme toggle, and a sprinkle of Open Graph metadata.
#+begin_src emacs-lisp
(defun tl/org-html-template-fancier (orig-fn contents info)
  "Return complete document string after HTML conversion.
CONTENTS is the transcoded contents string.  INFO is a plist
holding export options. Adds a few extra things to the body
compared to the default implementation."
  (if (or (not org-fancy-html-export-mode) (bound-and-true-p org-msg-export-in-progress))
      (funcall orig-fn contents info)
    (concat
     (when (and (not (org-html-html5-p info)) (org-html-xhtml-p info))
       (let* ((xml-declaration (plist-get info :html-xml-declaration))
              (decl (or (and (stringp xml-declaration) xml-declaration)
                        (cdr (assoc (plist-get info :html-extension)
                                    xml-declaration))
                        (cdr (assoc "html" xml-declaration))
                        "")))
         (when (not (or (not decl) (string= "" decl)))
           (format "%s\n"
                   (format decl
                           (or (and org-html-coding-system
                                    (fboundp 'coding-system-get)
                                    (coding-system-get org-html-coding-system 'mime-charset))
                               "iso-8859-1"))))))
     (org-html-doctype info)
     "\n"
     (concat "<html"
             (cond ((org-html-xhtml-p info)
                    (format
                     " xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"%s\" xml:lang=\"%s\""
                     (plist-get info :language) (plist-get info :language)))
                   ((org-html-html5-p info)
                    (format " lang=\"%s\"" (plist-get info :language))))
             ">\n")
     "<head>\n"
     (org-html--build-meta-info info)
     (org-html--build-head info)
     (org-html--build-mathjax-config info)
     "</head>\n"
     "<body>\n<input type='checkbox' id='theme-switch'><div id='page'><label id='switch-label' for='theme-switch'></label>"
     (let ((link-up (org-trim (plist-get info :html-link-up)))
           (link-home (org-trim (plist-get info :html-link-home))))
       (unless (and (string= link-up "") (string= link-home ""))
         (format (plist-get info :html-home/up-format)
                 (or link-up link-home)
                 (or link-home link-up))))
     ;; Preamble.
     (org-html--build-pre/postamble 'preamble info)
     ;; Document contents.
     (let ((div (assq 'content (plist-get info :html-divs))))
       (format "<%s id=\"%s\">\n" (nth 1 div) (nth 2 div)))
     ;; Document title.
     (when (plist-get info :with-title)
       (let ((title (and (plist-get info :with-title)
                         (plist-get info :title)))
             (subtitle (plist-get info :subtitle))
             (html5-fancy (org-html--html5-fancy-p info)))
         (when title
           (format
            (if html5-fancy
                "<header class=\"page-header\">%s\n<h1 class=\"title\">%s</h1>\n%s</header>"
              "<h1 class=\"title\">%s%s</h1>\n")
            (if (or (plist-get info :with-date)
                    (plist-get info :with-author))
                (concat "<div class=\"page-meta\">"
                        (when (plist-get info :with-date)
                          (org-export-data (plist-get info :date) info))
                        (when (and (plist-get info :with-date) (plist-get info :with-author)) ", ")
                        (when (plist-get info :with-author)
                          (org-export-data (plist-get info :author) info))
                        "</div>\n")
              "")
            (org-export-data title info)
            (if subtitle
                (format
                 (if html5-fancy
                     "<p class=\"subtitle\" role=\"doc-subtitle\">%s</p>\n"
                   (concat "\n" (org-html-close-tag "br" nil info) "\n"
                           "<span class=\"subtitle\">%s</span>\n"))
                 (org-export-data subtitle info))
              "")))))
     contents
     (format "</%s>\n" (nth 1 (assq 'content (plist-get info :html-divs))))
     ;; Postamble.
     (org-html--build-pre/postamble 'postamble info)
     ;; Possibly use the Klipse library live code blocks.
     (when (plist-get info :html-klipsify-src)
       (concat "<script>" (plist-get info :html-klipse-selection-script)
               "</script><script src=\""
               org-html-klipse-js
               "\"></script><link rel=\"stylesheet\" type=\"text/css\" href=\""
               org-html-klipse-css "\"/>"))
     ;; Closing document.
     "</div>\n</body>\n</html>")))

(advice-add 'org-html-template :around #'tl/org-html-template-fancier)
#+end_src

I think it would be nice if “Table of Contents” brought you back to the top of the page. Well, since we’ve done this much advising already…

#+begin_src emacs-lisp
(defun tl/org-html-toc-linked (depth info &optional scope)
  "Build a table of contents.

Just like `org-html-toc', except the header is a link to \"#\".

DEPTH is an integer specifying the depth of the table.  INFO is
a plist used as a communication channel.  Optional argument SCOPE
is an element defining the scope of the table.  Return the table
of contents as a string, or nil if it is empty."
  (let ((toc-entries
         (mapcar (lambda (headline)
                   (cons (org-html--format-toc-headline headline info)
                         (org-export-get-relative-level headline info)))
                 (org-export-collect-headlines info depth scope))))
    (when toc-entries
      (let ((toc (concat "<div id=\"text-table-of-contents\">"
                         (org-html--toc-text toc-entries)
                         "</div>\n")))
        (if scope toc
          (let ((outer-tag (if (org-html--html5-fancy-p info)
                               "nav"
                             "div")))
            (concat (format "<%s id=\"table-of-contents\">\n" outer-tag)
                    (let ((top-level (plist-get info :html-toplevel-hlevel)))
                      (format "<h%d><a href=\"#\" style=\"color:inherit; text-decoration: none;\">%s</a></h%d>\n"
                              top-level
                              (org-html--translate "Table of Contents" info)
                              top-level))
                    toc
                    (format "</%s>\n" outer-tag))))))))

(advice-add 'org-html-toc :override #'tl/org-html-toc-linked)
#+end_src

**** Collapsable src and example blocks
By wrapping the ~<pre>~ element in a ~<details>~ block, we can obtain collapsable blocks with no CSS, though we will toss a little in anyway to have this looking somewhat spiffy.

#+begin_src emacs-lisp
(defvar org-html-export-collapsed nil)

(defun tl/org-html-src-block-collapsable (orig-fn src-block contents info)
  "Wrap the usual <pre> block in a <details>"
  (if (or (not org-fancy-html-export-mode) (bound-and-true-p org-msg-export-in-progress))
      (funcall orig-fn src-block contents info)
    (let* ((properties (cadr src-block))
           (lang (tl/mode-name-to-lang-name
                  (plist-get properties :language)))
           (name (plist-get properties :name))
           (ref (org-export-get-reference src-block info))
           (collapsed-p (member (or (org-export-read-attribute :attr_html src-block :collapsed)
                                    (plist-get info :collapsed))
                                '("y" "yes" "t" t "true" "all"))))
      (format
       "<details id='%s' class='code'%s><summary%s>%s</summary>
<div class='gutter'>
<a href='#%s'>#</a>
<button title='Copy to clipboard' onclick='copyPreToClipbord(this)'>⎘</button>\
</div>
%s
</details>"
       ref
       (if collapsed-p "" " open")
       (if name " class='named'" "")
       (concat
        (when name (concat "<span class=\"name\">" name "</span>"))
        "<span class=\"lang\">" lang "</span>")
       ref
       (if name
           (replace-regexp-in-string (format "<pre\\( class=\"[^\"]+\"\\)? id=\"%s\">" ref) "<pre\\1>"
                                     (funcall orig-fn src-block contents info))
         (funcall orig-fn src-block contents info))))))

(defun tl/mode-name-to-lang-name (mode)
  (or (cadr (assoc mode
                   '(("asymptote" . "Asymptote")
                     ("awk" . "Awk")
                     ("C" . "C")
                     ("clojure" "Clojure")
                     ("css" "CSS")
                     ("D" "D")
                     ("ditaa" "ditaa")
                     ("dot" "Graphviz")
                     ("calc" "Emacs Calc")
                     ("emacs-lisp" "Emacs Lisp")
                     ("fortran" "Fortran")
                     ("gnuplot" "gnuplot")
                     ("haskell" "Haskell")
                     ("hledger" "hledger")
                     ("java" "Java")
                     ("js" "Javascript")
                     ("latex" "LaTeX")
                     ("ledger" "Ledger")
                     ("lisp" "Lisp")
                     ("lilypond" "Lilypond")
                     ("lua" "Lua")
                     ("matlab" "MATLAB")
                     ("mscgen" "Mscgen")
                     ("ocaml" "Objective Caml")
                     ("octave" "Octave")
                     ("org" "Org mode")
                     ("oz" "OZ")
                     ("plantuml" "Plantuml")
                     ("processing" "Processing.js")
                     ("python" "Python")
                     ("R" "R")
                     ("ruby" "Ruby")
                     ("sass" "Sass")
                     ("scheme" "Scheme")
                     ("screen" "Gnu Screen")
                     ("sed" "Sed")
                     ("sh" "shell")
                     ("sql" "SQL")
                     ("sqlite" "SQLite")
                     ("forth" "Forth")
                     ("io" "IO")
                     ("J" "J")
                     ("makefile" "Makefile")
                     ("maxima" "Maxima")
                     ("perl" "Perl")
                     ("picolisp" "Pico Lisp")
                     ("scala" "Scala")
                     ("shell" "Shell Script")
                     ("ebnf2ps" "ebfn2ps")
                     ("cpp" "C++")
                     ("abc" "ABC")
                     ("coq" "Coq")
                     ("groovy" "Groovy")
                     ("bash" "bash")
                     ("csh" "csh")
                     ("ash" "ash")
                     ("dash" "dash")
                     ("ksh" "ksh")
                     ("mksh" "mksh")
                     ("posh" "posh")
                     ("ada" "Ada")
                     ("asm" "Assembler")
                     ("caml" "Caml")
                     ("delphi" "Delphi")
                     ("html" "HTML")
                     ("idl" "IDL")
                     ("mercury" "Mercury")
                     ("metapost" "MetaPost")
                     ("modula-2" "Modula-2")
                     ("pascal" "Pascal")
                     ("ps" "PostScript")
                     ("prolog" "Prolog")
                     ("simula" "Simula")
                     ("tcl" "tcl")
                     ("tex" "LaTeX")
                     ("plain-tex" "TeX")
                     ("verilog" "Verilog")
                     ("vhdl" "VHDL")
                     ("xml" "XML")
                     ("nxml" "XML")
                     ("conf" "Configuration File"))))
      mode))

(advice-add 'org-html-src-block :around #'tl/org-html-src-block-collapsable)
#+end_src

#+begin_src emacs-lisp
(defun org-html-block-collapsable (orig-fn block contents info)
  "Wrap the usual block in a <details>"
  (if (or (not org-fancy-html-export-mode) (bound-and-true-p org-msg-export-in-progress))
      (funcall orig-fn block contents info)
    (let ((ref (org-export-get-reference block info))
          (type (pcase (car block)
                  ('property-drawer "Properties")))
          (collapsed-default (pcase (car block)
                               ('property-drawer t)
                               (_ nil)))
          (collapsed-value (org-export-read-attribute :attr_html block :collapsed))
          (collapsed-p (or (member (org-export-read-attribute :attr_html block :collapsed)
                                   '("y" "yes" "t" t "true"))
                           (member (plist-get info :collapsed) '("all")))))
      (format
       "<details id='%s' class='code'%s>
<summary%s>%s</summary>
<div class='gutter'>\
<a href='#%s'>#</a>
<button title='Copy to clipboard' onclick='copyPreToClipbord(this)'>⎘</button>\
</div>
%s\n
</details>"
       ref
       (if (or collapsed-p collapsed-default) "" " open")
       (if type " class='named'" "")
       (if type (format "<span class='type'>%s</span>" type) "")
       ref
       (funcall orig-fn block contents info)))))

(advice-add 'org-html-example-block   :around #'org-html-block-collapsable)
(advice-add 'org-html-fixed-width     :around #'org-html-block-collapsable)
(advice-add 'org-html-property-drawer :around #'org-html-block-collapsable)
#+end_src

**** Include extra font-locking in htmlize
Org uses [[https://github.com/hniksic/emacs-htmlize][htmlize.el]] to export buffers with syntax highlighting.

The works fantastically, for the most part. Minor modes that provide font-locking are /not/ loaded, and so do not impact the result.

By enabling these modes in ~htmlize-before-hook~ we can correct this behaviour.
#+begin_src emacs-lisp
(autoload #'highlight-numbers--turn-on "highlight-numbers")
(add-hook 'htmlize-before-hook #'highlight-numbers--turn-on)
#+end_src

**** Handle table overflow
In order to accommodate wide tables ---particularly on mobile devices--- we want to set a maximum width and scroll overflow. Unfortunately, this cannot be applied directly to the ~table~ element, so we have to wrap it in a ~div~.

While we're at it, we can a link gutter, as we did with src blocks, and show the ~#+name~, if one is given.
#+begin_src emacs-lisp
;; Define the advice
(defadvice org-html-table (around org-html-table-wrapped activate)
  "Wrap the usual <table> in a <div>"
  (if (or (not org-fancy-html-export-mode) (bound-and-true-p org-msg-export-in-progress))
      ad-do-it
    (let* ((name (plist-get (cadr table) :name))
           (ref (org-export-get-reference table info)))
      (setq ad-return-value
            (format "<div id='%s' class='table'>
<div class='gutter'><a href='#%s'>#</a></div>
<div class='tabular'>
%s
</div>\
</div>"
                    ref ref
                    (if name
                        (replace-regexp-in-string (format "<table id=\"%s\"" ref) "<table"
                                                  ad-do-it)
                      ad-do-it))))))

;; Apply the advice
(ad-activate 'org-html-table)
#+end_src

**** TOC as a collapsable tree
The TOC is much nicer to navigate as a collapsable tree. Unfortunately we cannot achieve this with CSS alone. Thankfully we can avoid JS though, by adapting the TOC generation code to use a ~label~ for each item, and a hidden ~checkbox~ to keep track of state.

To add this, we need to change one line in ~org-html--format-toc-headline~.

Since we can actually accomplish the desired effect by adding advice /around/ the function, without overriding it --- let's do that to reduce the bug surface of this config a tad.
#+begin_src emacs-lisp
(defun tl/org-html--format-toc-headline-collapseable (headline info)
  "Add a label and checkbox to `org-html--format-toc-headline's usual output,
to allow the TOC to be a collapsible tree."
  (if (or (not org-fancy-html-export-mode) (bound-and-true-p org-msg-export-in-progress))
      (org-html--format-toc-headline headline info)
    (let ((id (or (org-element-property :CUSTOM_ID headline)
                  (org-export-get-reference headline info))))
      (format "<input type='checkbox' id='toc--%s'/><label for='toc--%s'>%s</label>"
              id id (org-html--format-toc-headline headline info)))))

(advice-add 'org-html--format-toc-headline :around #'tl/org-html--format-toc-headline-collapseable)
#+end_src

Now, leaves (headings with no children) shouldn't have the ~label~ item. The
obvious way to achieve this is by including some /if no children.../ logic in
~org-html--format-toc-headline-colapseable~. Unfortunately, I can't my elisp isn't
up to par to extract the number of child headings from the mountain of info that
org provides.
#+begin_src emacs-lisp
(defun tl-org-html--toc-text-stripped-leaves (orig-fn toc-entries)
  "Remove label"
  (if (or (not org-fancy-html-export-mode) (bound-and-true-p org-msg-export-in-progress))
      (funcall orig-fn toc-entries)
    (replace-regexp-in-string "<input [^>]+><label [^>]+>\\(.+?\\)</label></li>" "\\1</li>"
                              (funcall orig-fn toc-entries))))

(advice-add 'org-html--toc-text-stripped-leaves :around #'tl-org-html--toc-text-stripped-leaves)
#+end_src

**** Make verbatim different to code
Since we have =verbatim= and ~code~, let's make use of the difference.

We can use ~code~ exclusively for code snippets and commands like: "calling src_elisp{(message "Hello")} in batch-mode emacs prints to stdout like ~echo~". Then we can use =verbatim= for miscellaneous 'other monospace' like keyboard shortcuts: "either =C-c C-c= or =C-g= is likely the most useful keybinding in Emacs", or file names: "I keep my configuration in =~/.config/emacs/=", among other things.

Then, styling these two cases differently can help improve clarity in a document.
#+begin_src emacs-lisp
(setq org-html-text-markup-alist
      '((bold . "<b>%s</b>")
        (code . "<code>%s</code>")
        (italic . "<i>%s</i>")
        (strike-through . "<del>%s</del>")
        (underline . "<span class=\"underline\">%s</span>")
        (verbatim . "<kbd>%s</kbd>")))
#+end_src

**** Header anchors
I want to add GitHub-style links on hover for headings.

#+begin_src emacs-lisp
(defun tl-org-export-html-headline-anchor (text backend info)
  (when (and (org-export-derived-backend-p backend 'html)
             (not (org-export-derived-backend-p backend 're-reveal))
             org-fancy-html-export-mode)
    (unless (bound-and-true-p org-msg-export-in-progress)
      (replace-regexp-in-string
       "<h\\([0-9]\\) id=\"\\([a-z0-9-]+\\)\">\\(.*[^ ]\\)<\\/h[0-9]>"
       "<h\\1 id=\"\\2\">\\3<a aria-hidden=\"true\" href=\"#\\2\">#</a> </h\\1>"
       text))))

(advice-add 'org-export-to-buffer :filter-args #'tl-org-export-html-headline-anchor)
#+end_src

**** Link previews
Sometimes it's nice to make a link particularly prominent, an embed/preview like Twitter does would be nice I think.

We can do this without too much trouble by adding a new link type ever so slightly different from =https= --- =Https=.
#+begin_src emacs-lisp
(org-link-set-parameters "Https"
                         :follow (lambda (url arg) (browse-url (concat "https:" url) arg))
                         :export #'org-url-fancy-export)
#+end_src

Then, if we can fetch a plist of the form src_elisp{(:title "..." :description "..." :image "...")} for such links via a function ~org-url-unfurl-metadata~, we can make a fancy export.
#+begin_src emacs-lisp
(defun org-url-fancy-export (url _desc backend)
  (let ((metadata (org-url-unfurl-metadata (concat "https:" url))))
    (cond
     ((org-export-derived-backend-p backend 'html)
      (concat
       "<div class=\"link-preview\">"
       (format "<a href=\"%s\">" (concat "https:" url))
       (when (plist-get metadata :image)
         (format "<img src=\"%s\"/>" (plist-get metadata :image)))
       "<small>"
       (replace-regexp-in-string "//\\(?:www\\.\\)?\\([^/]+\\)/?.*" "\\1" url)
       "</small><p>"
       (when (plist-get metadata :title)
         (concat "<b>" (org-html-encode-plain-text (plist-get metadata :title)) "</b></br>"))
       (when (plist-get metadata :description)
         (org-html-encode-plain-text (plist-get metadata :description)))
       "</p></a></div>"))
     (t url))))
#+end_src

Now we just need to actually implement that metadata extraction function.
#+begin_src emacs-lisp
(setq org-url-unfurl-metadata--cache nil)
(defun org-url-unfurl-metadata (url)
  (cdr (or (assoc url org-url-unfurl-metadata--cache)
           (car (push
                 (cons
                  url
                  (let* ((head-data
                          (-filter #'listp
                                   (cdaddr
                                    (with-current-buffer (progn (message "Fetching metadata from %s" url)
                                                                (url-retrieve-synchronously url t t 5))
                                      (goto-char (point-min))
                                      (delete-region (point-min) (- (search-forward "<head") 6))
                                      (delete-region (search-forward "</head>") (point-max))
                                      (goto-char (point-min))
                                      (while (re-search-forward "<script[^\u2800]+?</script>" nil t)
                                        (replace-match ""))
                                      (goto-char (point-min))
                                      (while (re-search-forward "<style[^\u2800]+?</style>" nil t)
                                        (replace-match ""))
                                      (libxml-parse-html-region (point-min) (point-max))))))
                         (meta (delq nil
                                     (mapcar
                                      (lambda (tag)
                                        (when (eq 'meta (car tag))
                                          (cons (or (cdr (assoc 'name (cadr tag)))
                                                    (cdr (assoc 'property (cadr tag))))
                                                (cdr (assoc 'content (cadr tag))))))
                                      head-data))))
                    (let ((title (or (cdr (assoc "og:title" meta))
                                     (cdr (assoc "twitter:title" meta))
                                     (nth 2 (assq 'title head-data))))
                          (description (or (cdr (assoc "og:description" meta))
                                           (cdr (assoc "twitter:description" meta))
                                           (cdr (assoc "description" meta))))
                          (image (or (cdr (assoc "og:image" meta))
                                     (cdr (assoc "twitter:image" meta)))))
                      (when image
                        (setq image (replace-regexp-in-string
                                     "^/" (concat "https://" (replace-regexp-in-string "//\\([^/]+\\)/?.*" "\\1" url) "/")
                                     (replace-regexp-in-string
                                      "^//" "https://"
                                      image))))
                      (list :title title :description description :image image))))
                 org-url-unfurl-metadata--cache)))))
#+end_src

*** LaTeX export
**** Compiling
By default Org uses ~pdflatex~ \times 3 + ~bibtex~. ~latexmk~ + ~biber~ (which is used automatically with ~latexmk~) is superior combination.
#+begin_src emacs-lisp
;; org-latex-compilers = ("pdflatex" "xelatex" "lualatex"), which are the possible values for %latex
(setq org-latex-pdf-process '("LC_ALL=en_US.UTF-8 latexmk -f -pdf -%latex -shell-escape -interaction=nonstopmode -output-directory=%o %f"))
#+end_src

**** Nicer checkboxes
We'll assume that thanks to the clever preamble the various custom =\checkbox...= commands below are defined.

#+begin_src emacs-lisp
(defun +org-export-latex-fancy-item-checkboxes (backend)
  "Replace LaTeX item with fancy checkboxes."
  (when (org-export-derived-backend-p backend 'latex)
    (save-excursion
      (goto-char (point-min))
      (while (re-search-forward
              "\\\\item\\[{$\\\\\\(\\w+\\)$}\\]" nil t)
        (replace-match
         (pcase (match-string 1)
           ("square"   "\\\\checkboxUnchecked")
           ("boxminus" "\\\\checkboxTransitive")
           ("boxtimes" "\\\\checkboxChecked")
           (_ (match-string 1)))
         t t)))))

(add-hook 'org-export-before-parsing-hook #'+org-export-latex-fancy-item-checkboxes)
#+end_src

**** Class template
#+begin_src emacs-lisp
(unless (boundp 'org-latex-classes)
  (setq org-latex-classes nil))

(add-to-list 'org-latex-classes
             '("article"
               "\\documentclass[11pt,a4paper,titlepage]{article}
\\usepackage[utf8]{inputenc}
\\usepackage[T1]{fontenc}
\\usepackage{fixltx2e}
\\usepackage{graphicx}
\\usepackage{longtable}
\\usepackage{float}
\\usepackage{wrapfig}
\\usepackage{rotating}
\\usepackage[normalem]{ulem}
\\usepackage[margin=0.8in]{geometry}
\\usepackage{amsmath}
\\usepackage{textcomp}
\\usepackage{marvosym}
\\usepackage{wasysym}
\\usepackage{amssymb}
\\usepackage{hyperref}
\\usepackage{mathpazo}
\\usepackage{color}
\\usepackage{enumerate}
\\definecolor{bg}{rgb}{0.95,0.95,0.95}
\\tolerance=1000
      [NO-DEFAULT-PACKAGES]
      [PACKAGES]
      [EXTRA]
\\linespread{1.1}
\\hypersetup{pdfborder=0 0 0}"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")))
#+end_src

**** Remove non-ascii chars
When using ~pdflatex~, almost non-ascii characters are generally problematic, and
don't appear in the pdf. It's preferable to see that there was /some/ character
which wasn't displayed as opposed to nothing.

We check every non-ascii character to make sure it's not a character encoded by
the =inputenc= packages when loaded with the =utf8= option. We'll also allow
box-drawing characters since they can be mostly supported with =pmboxdraw=.
Finally, we see if we have our own LaTeX conversion we can apply and if there is
none we replace the non-ascii char with =¿=.

No to make sure we only remove characters that can't be displayed, we check
=/usr/share/texmf/tex/latex/base/utf8enc.dfu=.

Now, there are some symbols that aren't included in =inputenc=, but we should be
able to handle anyway. For them we define a table of LaTeX translations

#+name: latex-non-ascii-char-substitutions
| Character | LaTeX |
|-----------+-------|
| ɑ         | \(\alpha\) |
| β         | \(\beta\) |
| γ         | \(\gamma\) |
| δ         | \(\delta\) |
| ε         | \(\epsilon\) |
| ϵ         | \(\varepsilon\) |
| ζ         | \(\zeta\) |
| η         | \(\eta\) |
| θ         | \(\theta\) |
| ϑ         | \(\vartheta\) |
| ι         | \(\iota\) |
| κ         | \(\kappa\) |
| λ         | \(\lambda\) |
| μ         | \(\mu\) |
| ν         | \(\nu\) |
| ξ         | \(\xi\) |
| π         | \(\pi\) |
| ϖ         | \(\varpi\) |
| ρ         | \(\rho\) |
| ϱ         | \(\varrho\) |
| σ         | \(\sigma\) |
| ς         | \(\varsigma\) |
| τ         | \(\tau\) |
| υ         | \(\upsilon\) |
| ϕ         | \(\phi\) |
| φ         | \(\varphi\) |
| ψ         | \(\psi\) |
| ω         | \(\omega\) |
| Γ         | \(\Gamma\) |
| Δ         | \(\Delta\) |
| Θ         | \(\Theta\) |
| Λ         | \(\Lambda\) |
| Ξ         | \(\Xi\) |
| Π         | \(\Pi\) |
| Σ         | \(\Sigma\) |
| Υ         | \(\Upsilon\) |
| Φ         | \(\Phi\) |
| Ψ         | \(\Psi\) |
| Ω         | \(\Omega\) |
| א         | \(\aleph\) |
| ב         | \(\beth\) |
| ד         | \(\daleth\) |
| ג         | \(\gimel\) |

#+name: gen-latex-non-ascii-char-substitutions
#+begin_src emacs-lisp :noweb-ref none :var latex-non-ascii-char-substitutions=latex-non-ascii-char-substitutions
(replace-regexp-in-string
 " '((" "\n   '(("
 (replace-regexp-in-string
  ") (" ")\n     ("
  (prin1-to-string
   `(defvar +org-latex-non-ascii-char-substitutions
      ',(mapcar
         (lambda (entry)
           (cons (car entry) (replace-regexp-in-string "\\\\" "\\\\\\\\" (cadr entry))))
         latex-non-ascii-char-substitutions)))))
#+end_src

#+begin_src emacs-lisp :noweb no-export
<<gen-latex-non-ascii-char-substitutions()>>
#+end_src

**** Extra special strings
LaTeX already recognises =---= and =--= as em/en-dashes, =\-= as a shy hyphen, and the
conversion of =...= to =\ldots{}= is hardcoded into ~org-latex-plain-text~ (unlike
~org-html-plain-text~).

I'd quite like to also recognise =->= and =<-=, so let's set come up with some advice.

#+begin_src emacs-lisp
(defvar org-latex-extra-special-string-regexps
  '(("<->" . "\\\\(\\\\leftrightarrow{}\\\\)")
    ("->" . "\\\\textrightarrow{}")
    ("<-" . "\\\\textleftarrow{}")))

(defun org-latex-convert-extra-special-strings (string)
  "Convert special characters in STRING to LaTeX."
  (dolist (a org-latex-extra-special-string-regexps string)
    (let ((re (car a))
          (rpl (cdr a)))
      (setq string (replace-regexp-in-string re rpl string t)))))

(defun tl/org-latex-plain-text-extra-special-a (orig-fn text info)
  "Make `org-latex-plain-text' handle some extra special strings."
  (let ((output (funcall orig-fn text info)))
    (when (plist-get info :with-special-strings)
      (setq output (org-latex-convert-extra-special-strings output)))
    output))

(advice-add 'org-latex-plain-text :around #'tl/org-latex-plain-text-extra-special-a)
#+end_src

**** Make verbatim different to code
Since have just gone to so much effort above let's make the most of it by making
=verbatim= use ~verb~ instead of ~protectedtexttt~ (default).

This gives the same advantages as mentioned in the [[*Make verbatim different to code][HTML export section]].

#+begin_src emacs-lisp
(setq org-latex-text-markup-alist
      '((bold . "\\textbf{%s}")
        (code . protectedtexttt)
        (italic . "\\emph{%s}")
        (strike-through . "\\sout{%s}")
        (underline . "\\uline{%s}")
        (verbatim . verb)))
#+end_src

**** Pretty code blocks
We could just use minted for syntax highlighting --- however, we can do better! The =engrave-faces= package lets us use Emacs' font-lock for syntax highlighting, exporting that as LaTeX commands.

#+begin_src emacs-lisp
(use-package engrave-faces
  :ensure t
  :after ox-latex)
#+end_src

Using this as in LaTeX exports is now as easy as:
#+begin_src emacs-lisp
(setq org-latex-listings 'engraved)
#+end_src

One little annoyance with this is the interaction between microtype and =Verbatim= environments. Protrusion is not desirable here. Thankfully, we can patch the =Verbatim= environment to turn off protrusion locally.
#+begin_src emacs-lisp
(defun tl/org-latex-no-protrusion-in-code (backend)
  "Conditionally modify LaTeX export for code blocks."
  (when (and (eq backend 'latex) (featurep 'microtype))
    (setq org-latex-listings-options
          (concat org-latex-listings-options "\\microtypesetup{protrusion=false}"))))

(add-hook 'org-export-before-parsing-hook #'tl/org-latex-no-protrusion-in-code)
#+end_src

At some point it would be nice to make the box colours easily customisable. At the moment it's fairly easy to change the syntax highlighting colours with src_elisp{(setq engrave-faces-preset-styles (engrave-faces-generate-preset))}, but perhaps a toggle which specifies whether to use the default values, the current theme, or any named theme could be a good idea. It should also possible to set the box background dynamically to match. The named theme could work by looking for a style definition with a certain name in a cache dir, and then switching to that theme and producing (and saving) the style definition if it doesn't exist.

Now let's have the example block be styled similarly.
#+begin_src emacs-lisp
(defun tl/org-latex-example-block-engraved (orig-fn example-block contents info)
  "Like `org-latex-example-block', but supporting an engraved backend"
  (let ((output-block (funcall orig-fn example-block contents info)))
    (if (eq 'engraved (plist-get info :latex-listings))
        (format "\\begin{Code}[alt]\n%s\n\\end{Code}" output-block)
      output-block)))

(advice-add 'org-latex-example-block :around #'tl/org-latex-example-block-engraved)
#+end_src

*** ASCII export
To start with, why settle for ASCII when UTF-8 exists?
#+begin_src emacs-lisp
(setq org-ascii-charset 'utf-8)
#+end_src

The ASCII export is generally fairly nice. I think the main aspect that could benefit from improvement is the appearance of LaTeX fragments. There's a nice utility we can use to create unicode representation, which are much nicer. It's called ~latex2text~, and it's part of the =python-pylatexenc=.

With that installed, we can override the src_elisp{(org-ascii-latex-fragment)} and src_elisp{(org-ascii-latex-environment)} functions, which are conveniently very slim --- just extracting the content, and indenting. We'll only do something different when =utf-8= is set.
#+begin_src emacs-lisp
(when (executable-find "latex2text")
  (eval-after-load 'ox-ascii
    '(progn
       (defvar org-ascii-convert-latex t
         "Use latex2text to convert LaTeX elements to unicode.")

       (defun tl/org-ascii-latex-environment-unicode (latex-environment _contents info)
         "Transcode a LATEX-ENVIRONMENT element from Org to ASCII, converting to unicode.
CONTENTS is nil.  INFO is a plist holding contextual information."
         (when (plist-get info :with-latex)
           (org-ascii--justify-element
            (org-remove-indentation
             (let* ((latex (org-element-property :value latex-environment))
                    (unicode (and (eq (plist-get info :ascii-charset) 'utf-8)
                                  org-ascii-convert-latex
                                  (call-process "latex2text" nil t nil "-q" "--code" latex))))
               (if (= (car unicode) 0) ; utf-8 set, and successfully ran latex2text
                   (cdr unicode) latex)))
            latex-environment info)))

       (advice-add 'org-ascii-latex-environment :override #'tl/org-ascii-latex-environment-unicode)

       (defun tl/org-ascii-latex-fragment-unicode (latex-fragment _contents info)
         "Transcode a LATEX-FRAGMENT object from Org to ASCII, converting to unicode.
CONTENTS is nil.  INFO is a plist holding contextual information."
         (when (plist-get info :with-latex)
           (let* ((latex (org-element-property :value latex-fragment))
                  (unicode (and (eq (plist-get info :ascii-charset) 'utf-8)
                                org-ascii-convert-latex
                                (call-process "latex2text" nil t nil "-q" "--code" latex))))
             (if (and unicode (= (car unicode) 0)) ; utf-8 set, and successfully ran latex2text
                 (cdr unicode) latex))))

       (advice-add 'org-ascii-latex-fragment :override #'tl/org-ascii-latex-fragment-unicode))))
#+end_src
